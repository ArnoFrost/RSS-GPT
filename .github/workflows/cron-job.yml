# 控制何时运行工作流程。
on:
  # 每两小时运行一次任务的计划
  schedule:
    - cron: '0 */2 * * *'  # 每两小时的第0分钟执行。
  # 允许从GitHub Actions界面手动触发工作流程。
  workflow_dispatch:

# 工作流程由一个或多个作业组成。
jobs:
  # 这个工作流程包含一个名为 "build" 的作业。
  build:
    # 指定作业应该在Ubuntu 20.04环境下运行。
    runs-on: ubuntu-20.04

    # 作业的执行步骤序列。
    steps:
      # 签出仓库到运行器，以便后续步骤可以访问它。
      - name: Check out repository
        uses: actions/checkout@v3  # 这个操作会签出你的仓库副本。
        with:
          token: ${{ secrets.WORK_TOKEN }}  # 用于签出的token，存储为密钥。
          ref: arno  # 要签出的分支。

      # 设置指定版本的Python环境。
      - name: Set up Python 3.8
        uses: actions/setup-python@v4  # 这个操作用于设置Python环境。
        with:
          python-version: '3.8'  # 要设置的Python版本。

      # 从requirements.txt文件安装依赖项。
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip  # 升级pip。
          pip install -r requirements.txt  # 安装所需的包。

      # 执行Python脚本并列出docs目录中的内容。
      - name: ls_show
        run: |
          python main.py  # 运行Python脚本。
          ls -al docs/  # 详细格式列出'docs'目录中的所有文件。
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}  # 脚本的环境变量。
          U_NAME: ${{ secrets.U_NAME }}

      # 此步骤提交docs目录或README文件中的任何更改，并将它们推送到仓库。
      - name: PUSH
        env:
          U_NAME: ${{ secrets.U_NAME }}  # git配置的用户名。
          U_EMAIL: ${{ secrets.U_EMAIL }}  # git配置的用户电子邮件。
        run: |
          pwd  # 打印当前工作目录。
          git config --local user.name "${U_NAME}"  # 设置本地git用户名。
          git config --local user.email "${U_EMAIL}"  # 设置本地git电子邮件。
          
          git status -s  # 以简短格式显示更改状态。
          git add docs/*  # 阶段性变化在'docs'目录。
          git add README*  # 阶段性变化在README文件。
          export TZ='Europe/London'  # 设置提交时间戳的时区。
          git commit -m "Github Auto Build at `date +"%Y-%m-%d %H:%M"`"  # 带有时间戳的提交更改。
          
          echo "======git push===="  # 回显消息用于调试。
          git push  # 将提交推送到仓库。
