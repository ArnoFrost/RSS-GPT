<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>The JetBrains Blog</title>
        <link>https://blog.jetbrains.com</link>
        <description>Developer Tools for Professionals and Teams</description>
        <atom:link href="https://blog.jetbrains.com" rel="self" type="application/rss+xml"/>
        
        <item>
            <title>IntelliJ IDEA 2023.3 Goes Beta!</title>
            <link>https://blog.jetbrains.com/idea/2023/11/intellij-idea-2023-3-beta/</link>
            <guid isPermaLink="true">https://blog.jetbrains.com/idea/2023/11/intellij-idea-2023-3-beta/</guid>
            <description><![CDATA[None]]></description>
            <content:encoded><![CDATA[
            <div style="font-family: Arial, sans-serif;">
                
                
                <p><p>The 2023.3 Beta version of IntelliJ IDEA is here!</p>



<p>You can get the latest build from our <a href="https://www.jetbrains.com/idea/nextversion/" rel="noopener" target="_blank">website</a>, through the free <a href="https://www.jetbrains.com/toolbox-app/" rel="noopener" target="_blank">Toolbox App</a>, or via snaps for Ubuntu.</p>



<figure class="wp-block-image size-full"><img alt="" class="wp-image-404575" height="1440" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/2023.3-Beta-Blog_Featured_image_1280x600_IntelliJIDEA-2x-1.png" width="2560" /></figure>



<p>This build includes all of the significant updates introduced during the Early Access Program, which we&#8217;ve detailed in our earlier <a href="https://blog.jetbrains.com/idea/tag/intellij-idea-2023-3-eap/">blog posts</a>.</p>



<p>Here’s the list of the most notable improvements and additions in the upcoming major release:</p>



<ul>
<li>Full support for Java 21 features</li>



<li><em>Run to Cursor </em>inlay option in the debugger</li>



<li>Floating toolbar with code editing actions</li>



<li>Support for GitLab snippets</li>



<li>All-in-one diff viewer</li>



<li>Improvements for both Maven and Gradle import</li>



<li>Visual editing for OpenAPI specifications</li>



<li>Enhancements for Quarkus and Micronaut</li>



<li>Spring 6.1 feature support</li>



<li>Spring for GraphQL support</li>



<li>Kubernetes tooling available out of the box</li>



<li>Extended Dev Containers support</li>



<li>HTTP Client improvements</li>
</ul>



<p></p>



<p>To learn about these and other new features in detail, explore the IntelliJ IDEA 2023.3 EAP section of <a href="https://blog.jetbrains.com/idea/tag/intellij-idea-2023-3-eap/">our blog</a>.</p>



<p>In this blog post, we’d also like to draw your attention to some changes that were not covered before.</p>



<h2 class="wp-block-heading">Kotlin</h2>



<h3 class="wp-block-heading">Latest Kotlin version support now comes with IDE updates</h3>



<p>As of v2023.3, support for new Kotlin versions is delivered together with IntelliJ IDEA and Android Studio updates, meaning that you no longer need to update the Kotlin plugin from the JetBrains Marketplace. With every major IDE release, you can expect built-in support for upcoming Kotlin Beta and Stable versions.</p>



<h3 class="wp-block-heading">Kotlin auto-configuration in Java Gradle projects</h3>



<p>If you add a Kotlin file to a Java module, IntelliJ IDEA can now automatically add all needed Kotlin dependencies to the module by changing build scripts. You can easily review these changes and undo them.&nbsp;</p>



<p>For now, auto-configuration is possible for Gradle projects that meet specific criteria, some of which include:</p>



<ul>
<li>The Gradle version must be compatible with the Kotlin versions that are available for this project.&nbsp;</li>



<li>Modules must not contain a <em>`buildSrc`</em> folder.</li>



<li>Gradle sync must not be in progress.&nbsp;</li>
</ul>



<p></p>



<p>If auto-configuration is not possible, the IDE will suggest you manually configure Kotlin as before.</p>



<figure class="wp-block-image"><img alt="" src="https://lh7-us.googleusercontent.com/PLVHjcegZ9VOGszwEQv-ivQpDuH59e6UHs813PsWvlpI95fwFuRrzXzb-_vxTDoefYTsl-eo6k6CczpfGYYJmglb5es0d28PFZ9PlQXNDra4vCSdt7-Tq4cfwDzc48mLaN30az1sG6_KbeJr8xWSv6w" /></figure>



<h2 class="wp-block-heading">Other</h2>



<h3 class="wp-block-heading">Plugin updates</h3>



<p>In IntelliJ IDEA 2023.3 and beyond, we have made changes to our plugin distribution. Android, Ant, and GlassFish plugins are now available through JetBrains Marketplace. This also applies to the XPathView plugin for the IntelliJ IDEA Community edition.</p>



<p>These are the updates we wanted to share with you this week. For the full list of the latest changes, check out the <a href="https://youtrack.jetbrains.com/articles/IDEA-A-2100661745/IntelliJ-IDEA-2023.3-Beta-233.11799.6-build-Release-Notes" rel="noopener" target="_blank">release notes</a>.</p>



<p>The Early Access Program for IntelliJ IDEA 2023.3 is coming to a close. However, you still have the opportunity to explore the latest features and provide us with your valuable feedback.</p>



<p>We&#8217;d love to hear your thoughts, so please share your opinions in the comments section below or on <a href="http://twitter.com/intellijidea" rel="noopener" target="_blank">X (formerly Twitter)</a>. If you encounter any bugs, report them through our <a href="https://youtrack.jetbrains.com/issues/IDEA" rel="noopener" target="_blank">issue tracker</a>. Your feedback is essential to us!</p>



<p>Happy developing!</p></p>
            </div>
        ]]></content:encoded>
            <pubDate>Thu, 09 Nov 2023 17:29:25 +0000</pubDate>
        </item>
        
        <item>
            <title>CLion Nova Explodes onto the C and C++ Development Scene</title>
            <link>https://blog.jetbrains.com/clion/2023/11/clion-nova/</link>
            <guid isPermaLink="true">https://blog.jetbrains.com/clion/2023/11/clion-nova/</guid>
            <description><![CDATA[None]]></description>
            <content:encoded><![CDATA[
            <div style="font-family: Arial, sans-serif;">
                
                
                <p><p>TL;DR</p>
<p>Today, we’re announcing a free early preview of CLion, which uses the ReSharper C++/Rider C++ language engine instead of the CLion &quot;legacy&quot; engine. The Preview build is available via our dedicated Toolbox App feed. At some point in 2024, depending on the results of the feedback collected, CLion Nova will be merged into CLion. Until then, the Preview build will be free to use and can be installed in parallel with your usual CLion (Classic) installation.</p>
<p><a href="https://www.jetbrains.com/toolbox-app/" rel="noopener" target="_blank"><img alt="CLion Nova" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/Featured_Blog_1280x720_CLionNova.png" width="640" /></a></p>
<h2 id="prehistory">Prehistory</h2>
<p>The first C++ engine by JetBrains was designed for AppCode, our IDE for iOS and macOS developers. It was part of the IntelliJ Platform, initially written in Java and later also in Kotlin. The approach and the architecture of the engine serve many languages in IntelliJ-based IDEs well; however, this design turned out not to be the best fit for the C++ language specifically.</p>
<p>To more quickly align with the evolution of C++ and to separate the engine and IDE processes, a clangd-based engine was later added to CLion. Built on our custom branch of clangd, this engine detects any warnings and errors, shows them in the editor, and suggests quick-fixes, as well as performing highlighting, completion, and certain navigation actions. It’s also used for things like <a href="https://blog.jetbrains.com/clion/2023/11/striving-for-better-cpp-code-part-i-data-flow-analysis-basics/">data flow analysis</a> and MISRA checks. Meanwhile, CLion&#8217;s “legacy” engine is responsible for other code insight features like refactorings. You can see a detailed “list of responsibilities” in our <a href="https://www.jetbrains.com/help/clion/2023.3/c-support.html" rel="noopener" target="_blank">CLion documentation</a>.</p>
<p>Clangd has many advantages, but it isn’t very helpful when it comes to project-wide refactorings and actions. We prototyped a clangd-based indexer and even implemented an experimental <em>Find Usages</em> on top of it, which you can <a href="https://www.jetbrains.com/help/clion/2023.3/find-highlight-usages.html#usages-clangdindexer" rel="noopener" target="_blank">enable and evaluate in </a><a href="https://www.jetbrains.com/help/clion/2023.3/find-highlight-usages.html#usages-clangdindexer" rel="noopener" target="_blank">CLion</a>.</p>
<p>Another alternative developed by JetBrains for C++ is the language engine used in ReSharper C++ and Rider (for game development in C++). There is also a communication protocol in place that makes it possible for an IntelliJ-based IDE like Rider to communicate with the stand-alone backend process serving as a language engine. We have now adapted this protocol and the original engine to CLion as well!</p>
<h2 id="goals">Goals</h2>
<p>In this new and experimental solution, we’re focused on the responsiveness, accuracy, and performance of the IDE. There are two main goals we have in mind:</p>
<ul>
<li>Addressing the long-standing <strong>performance</strong> and <strong>quality</strong> issues of CLion caused by the usage of the “legacy” engine.</li>
<li>Unifying the user experience across all of our C++ tools, i.e. CLion, Rider, and ReSharper C++.</li>
</ul>
<p><img alt="CLion Nova About" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/about.png" width="531" /></p>
<p>We named our new experimental preview <strong>CLion Nova,</strong> and the current version of CLion is now <strong>CLion Classic</strong>. In the future, we plan for CLion Nova to be merged into CLion Classic. No new product is envisaged.</p>
<h2 id="benefits_and_enhancements">Benefits and enhancements</h2>
<p>CLion Nova still uses two C++ language engines: a clangd-based one and the one used by ReSharper C++/Rider. Most of the features of CLion Classic should work exactly the same in CLion Nova.</p>
<p>The most notable benefits in terms of performance in CLion Nova are:</p>
<ul>
<li>Faster highlighting speeds, especially in the case of incremental code updates</li>
<li>A more responsive UI</li>
<li>Faster <em>Find Usages</em></li>
<li>Significantly fewer freezes and hangs in refactorings</li>
<li>Faster test indexing</li>
</ul>
<p>This unification also brings some new functions to CLion Nova that aren’t included in CLion Classic’s feature set:</p>
<ul>
<li>New refactorings like <a href="https://www.jetbrains.com/help/resharper/Refactorings_for_CPP.html#intro_field" rel="noopener" target="_blank">introduce field</a>, <a href="https://www.jetbrains.com/help/resharper/Refactorings_for_CPP.html#namespace_alias" rel="noopener" target="_blank">introduce namespace alias</a>, <a href="https://www.jetbrains.com/help/resharper/Refactorings_for_CPP.html#using_enum" rel="noopener" target="_blank">introduce using enumeration</a>, and <a href="https://www.jetbrains.com/help/resharper/Refactorings_for_CPP.html#convert_to_scoped" rel="noopener" target="_blank">convert to scoped enumeration</a>.</li>
<li>New inspections, quick-fixes, and intentions like redundant qualifier, the replace <code>auto</code> with explicit type declaration, and <a href="https://www.jetbrains.com/help/resharper/Code_Style_Assistance_in_CPP.html#sort_includes" rel="noopener" target="_blank">sorting of </a><a href="https://www.jetbrains.com/help/resharper/Code_Style_Assistance_in_CPP.html#sort_includes" rel="noopener" target="_blank"><code>#include</code></a><a href="https://www.jetbrains.com/help/resharper/Code_Style_Assistance_in_CPP.html#sort_includes" rel="noopener" target="_blank"> directives</a>.</li>
<li>New code hints like <a href="https://www.jetbrains.com/help/resharper/Settings_Inlay_Hints_CPP_Other.html#preprocessor-directive" rel="noopener" target="_blank">preprocessor directive hints</a>﻿ and a <a href="https://www.jetbrains.com/help/resharper/Inline_Parameter_Name_Hints.html#push-to-hint-mode" rel="noopener" target="_blank">Push-to-Hint mode</a>.</li>
</ul>
<p><img alt="Sorting includes" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/sort_includes.png" width="600" /></p>
<h2 id="notable_differences">Notable differences</h2>
<p>Unlike CLion Classic, CLion Nova doesn&#8217;t use <strong>clangd</strong> for core IDE features like code completion or highlighting. However, the JetBrains&#8217; clangd fork is still running alongside the new engine for various tasks (ClangFormat, Clang-Tidy, MISRA checks, data flow analysis, etc.).</p>
<p>There are a few things that will look and feel new to CLion Classic users when they start using CLion Nova:</p>
<ul>
<li>Some of the ways the IDE reacts when the user is typing are different.</li>
<li>Some UI elements and settings related to code insight features might look unusual or be found in unfamiliar locations.</li>
<li>Some code-related settings might have different default values in CLion Nova. On the first launch, CLion Nova will migrate some of your per-project and per-application settings from CLion Classic, but not all of them.</li>
<li>Switching between different language configurations (i.e. Debug/Release) might require more time for the code insight engine to catch up. There is also no option to switch resolve context per file.</li>
<li>ReSharper C++ is Windows-only, while Rider is cross-platform. Still, the ReSharper C++/Rider engine might not support non-Windows environments as seamlessly as a Windows one. It’s worth reporting such cases to us if you come across them.</li>
</ul>
<p><img alt="Type conversion hints settings" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/type_conversion_hints.png" width="912" /></p>
<p>There’s also a list of currently missing functionality:</p>
<ul>
<li><strong>Toolchains</strong>: Several options exist to set up <a href="https://www.jetbrains.com/help/clion/2023.3/remote-development.html" rel="noopener" target="_blank">remote work</a> in CLion. Remote work with local sources is supported in CLion Nova, while remote work with a thin client (Gateway) is not yet available.</li>
<li><strong>Languages</strong>: Objective-C language, CUDA (<a href="https://youtrack.jetbrains.com/issue/RSCPP-613" rel="noopener" target="_blank">RSCPP-613</a>, <a href="https://youtrack.jetbrains.com/issue/CPP-26144" rel="noopener" target="_blank">CPP-26144</a>), and some vendor-specific compiler extensions aren’t yet supported.</li>
<li>Some intentions and quick-fixes like <em>Simplify statement</em> are not supported at present (<a href="https://youtrack.jetbrains.com/issue/CPP-35879" rel="noopener" target="_blank">CPP-35879</a>).</li>
<li>Some less popular refactorings are also missing. We plan to reintroduce the <em>Move</em> (<a href="https://youtrack.jetbrains.com/issue/CPP-35867" rel="noopener" target="_blank">CPP-35867</a>) and <em>Inline Parameter</em> refactorings (<a href="https://youtrack.jetbrains.com/issue/CPP-35868" rel="noopener" target="_blank">CPP-35868</a>) at a later date.</li>
<li>JetBrains’ AI Assistant is not yet available for CLion Nova.</li>
</ul>
<h2 id="how_to_install_clion_nova">How to install CLion Nova</h2>
<p>CLion Nova is a free early preview build available only via the <a href="https://www.jetbrains.com/toolbox-app/" rel="noopener" target="_blank">Toolbox App</a>:</p>
<p><img alt="Toolbox app" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/toolbox_app.png" width="427" /></p>
<p>CLion Nova is an Early Access Preview build, which means a login is required, but you can use it for free until CLion Nova merges into CLion. We’ll be publishing regular updates to CLion Nova, which will also be available via the Toolbox App.</p>
<p>Compared to CLion Classic, CLion Nova brings a more responsive UI, better overall IDE performance, and increased feature quality, especially with C++ code refactorings. Try it now and let us know what you think!</p>
<h2 id="share_your_feedback">Share your feedback</h2>
<p>CLion Nova marks a big change and requires detailed testing in various environments. So we’re asking you, our users, for help! Given that you have a variety of environments and use cases, we want you to test out CLion Nova and share your experiences with us.</p>
<p>We are specifically interested in your thoughts on:</p>
<ul>
<li>What works better on your project in CLion Nova compared to CLion Classic?</li>
<li>What interrupts your workflow and prevents you from using the IDE in CLion Nova? Are these interruptions CLion Nova-specific, or are they also present in CLion Classic?</li>
</ul>
<p>After using CLion Nova for some time, you’ll be asked to submit a feedback form. We’d be grateful if you can spare the time to do so!</p>
<p><img alt="Feedback" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/feedback.png" width="688" /></p>
<p>And, of course, our <a href="https://youtrack.jetbrains.com/issues/CPP" rel="noopener" target="_blank">issue tracker</a> is also open for receiving your feedback – just don’t forget to mention that your issue relates to CLion Nova and not CLion Classic.</p>
<p align="center"><a class="jb-download-button" href="https://www.jetbrains.com/toolbox-app/" rel="noopener" target="_blank"><i class="download-icon"></i>GET VIA TOOLBOX APP</a></p>
<p>Your CLion team<br />
JetBrains<br />
<em>The Drive to Develop</em></p></p>
            </div>
        ]]></content:encoded>
            <pubDate>Thu, 09 Nov 2023 15:02:52 +0000</pubDate>
        </item>
        
        <item>
            <title>Toolbox App 2.1 Is Now Available</title>
            <link>https://blog.jetbrains.com/toolbox-app/2023/11/toolbox-app-2-1-is-now-available/</link>
            <guid isPermaLink="true">https://blog.jetbrains.com/toolbox-app/2023/11/toolbox-app-2-1-is-now-available/</guid>
            <description><![CDATA[None]]></description>
            <content:encoded><![CDATA[
            <div style="font-family: Arial, sans-serif;">
                
                
                <p><p>In the previous release, we reworked the installation and update processes from the ground up, allowing for update downloads in the background to be performed first and introducing permanent installation paths that conform to operating system guidelines.</p>



<p>Toolbox App 2.1 addresses feedback, fixes bugs, adds a few finishing touches to the new installation process, and introduces Ukrainian localization.</p>



<p><strong>Changing the installation directory is back</strong></p>



<p>In <a href="https://blog.jetbrains.com/toolbox-app/2023/08/toolbox-app-2-0-overhauls-installations-and-updates/">Toolbox App 2.0</a>, we introduced the new default and fixed location for your tools, conforming to the operating system guidelines (<code>%LocalAppData%\Programs</code> for <em>Windows</em>, <code>~/Applications</code> for <em>macOS</em>, and <code>~/.local/share/JetBrains/Toolbox/apps</code> for <em>Linux</em>).<br /><br />With the introduction of Toolbox App 2.1, we bring back the ability to change the installation directory for your tools. You can now install your tools in the location of your choice, be it in a different folder or on a separate disk entirely.&nbsp;</p>



<p>To specify the new location, go to the Toolbox App settings (choose <em>Settings</em> under the locknut icon in the upper right-hand corner of the main Toolbox App screen), scroll down to the Tools section, and change the <em>Tools install location</em> field. All new tools will then be installed in the new location.<br />Keep in mind that tools installed prior to choosing a new location will remain in the directory in which they were originally installed. They won’t be moved to the new directory with this action or when updating the Toolbox App. We plan to introduce functionality to migrate already installed tools to a custom directory in a later release.</p>



<p class="has-text-align-center"><img height="603" src="https://lh7-us.googleusercontent.com/VB9j4d5aIZDizP16OXsuU1UO41jZAihoL50pS8Gh7GLqad44A6_yA_nAugF58lp940BsWj1hlPD_2DRLyGbVq_2qWNPcadStiFJsSb-OHHlXD7IZHi2YzEc0wiHoZP-C_caC4J_sUx1saFSpYDx2Kfo" width="624" /></p>



<p><strong>Dedicated action for cleaning backups</strong></p>



<p>We introduced a new <em>Remove the previous versions</em> action for cleaning backups. By default, the Toolbox App cleans up the previously stored versions to enable instant rollback after three days. With the new action, you can see how much storage they use and remove them with a single click.</p>



<p class="has-text-align-center"><img height="521" src="https://lh7-us.googleusercontent.com/rZCXdGEqMwoIaYs0f0Vvu28CObDZVPJfSjhCCzClIh_-es0EkNbUGGZVv3WmzJ8hbmNp5kEu1WWsj3jx2HK1bgWTbIZs0OxnsS3kKr9rSKvPVyIEdoPAOMbHn-r5TSNZZBLHoe7-E02uE_WdLmqFowI" width="624" /></p>



<p><strong>Cache and temporary file storage&nbsp;</strong></p>



<p>We eliminated the usage of a temporary directory for storing temporary files, fixing the need to allocate more storage to <code>/tmp</code> to update your tools seamlessly. The temporary files will now be stored in the Toolbox App cache folders.<br /><br />On Linux, the cache directory now conforms to operating system guidelines and is moved to <code>~/.cache/JetBrains/Toolbox</code><em>.</em></p>



<p><strong>Warning about insufficient permissions</strong></p>



<p>The Toolbox App can update tools only to a directory for which the user has given permissions. Previously, for tools in a write-protected directory, the Toolbox App didn’t show the <em>Update </em>button. Starting with version 2.1, you will see a disabled <em>Update </em>button and a <a href="https://toolbox-support.jetbrains.com/hc/en-us/articles/13696838691474-How-to-update-a-tool-if-The-installation-path-is-not-writable-error-is-shown-" rel="noopener" target="_blank">link</a> to an article providing clear instructions on how to restore the ability to update in the tool settings.<br />In a future release, we plan to introduce the ability to elevate permissions and install and update tools system-wide.</p>



<p class="has-text-align-center"><img height="471" src="https://lh7-us.googleusercontent.com/emUyko2A_Y5VSlWUocsIVYH1wVbKDBcOhpffJQntp3ezxoorj6o4-EKb-MjjreCzNh47brJhN-7RcvuQTwTB-JpNXnsEPEm_U4bmovSpHMyi-HSxs7lpFTN5L-CE_XTPXGevdZmf7l9AYqVL8vP-XHU" width="624" /></p>



<p><strong>Ukrainian community localization</strong></p>



<p>A new language is available! You can now use the Toolbox App in Ukrainian, thanks to the contribution of our users, Artem Dorosh and Volodymyr Lantsov. If you’d like to help us add a language that’s not yet available, contact us via <a href="https://youtrack.jetbrains.com/issue/TBX-8334/Community-translations" rel="noopener" target="_blank">YouTrack</a> or <a href="mailto:toolbox-support@jetbrains.com">email</a>.</p>



<p><strong>Toolbox Enterprise improvements</strong></p>



<p>We also added several features for Toolbox Enterprise, a centralized solution for the provisioning and management of JetBrains IDEs to the developers’ machines in an organization. Toolbox Enterprise received plugin management improvements, as well as tool version notifications according to organizational guidelines.<br />If you think your organization would benefit from a streamlined IDE management solution, feel free to request a demo or get preview access on the <a href="https://www.jetbrains.com/toolbox-enterprise/" rel="noopener" target="_blank">Toolbox Enterprise page</a>.</p>



<p>For more information on changes and improvements, head over to the full <a href="https://youtrack.jetbrains.com/releaseNotes/TBX?q=Fix%20versions:%202.1%20%23Resolved%20-Duplicate%20-Answered&amp;title=Toolbox%20App%202.1%20Release%20Notes&amp;utm_source=product&amp;utm_medium=link&amp;utm_campaign=TBA" rel="noopener" target="_blank">release notes</a>.</p>



<p>Yours,</p>



<p>The Toolbox App team</p></p>
            </div>
        ]]></content:encoded>
            <pubDate>Thu, 09 Nov 2023 14:53:53 +0000</pubDate>
        </item>
        
        <item>
            <title>IntelliJ IDEA 2023.2.5 Is Out!</title>
            <link>https://blog.jetbrains.com/idea/2023/11/intellij-idea-2023-2-5/</link>
            <guid isPermaLink="true">https://blog.jetbrains.com/idea/2023/11/intellij-idea-2023-2-5/</guid>
            <description><![CDATA[None]]></description>
            <content:encoded><![CDATA[
            <div style="font-family: Arial, sans-serif;">
                
                
                <p><p>The IntelliJ IDEA 2023.2.5 bug-fix update is now available. </p>



<p>You can update to this version from inside the IDE, using the&nbsp;<a href="https://www.jetbrains.com/toolbox-app/" rel="noreferrer noopener" target="_blank">Toolbox App</a>, or using snaps if you are an Ubuntu user. You can also download it from our&nbsp;<a href="https://www.jetbrains.com/idea/download/" rel="noreferrer noopener" target="_blank">website</a>.</p>



<p>This update brings the following important fix:</p>



<ul>
<li>The IDE no longer encounters startup failures accompanied by the&nbsp;<em>“Cannot connect to an already running IDE instance”</em>&nbsp;error, which was previously triggered by an improper termination of the previous session. [<a href="https://youtrack.jetbrains.com/issue/IDEA-330531/" rel="noreferrer noopener" target="_blank">IDEA-330531</a>]</li>
</ul>



<p></p>



<p>Please take a look at the full list of changes in the <a href="https://youtrack.jetbrains.com/articles/IDEA-A-2100661744/IntelliJ-IDEA-2023.2.5-232.10227.8-build-Release-Notes" rel="noreferrer noopener" target="_blank">release notes</a>.</p>



<p>Happy developing!</p></p>
            </div>
        ]]></content:encoded>
            <pubDate>Thu, 09 Nov 2023 14:35:58 +0000</pubDate>
        </item>
        
        <item>
            <title>.NET Annotated Monthly | November 2023</title>
            <link>https://blog.jetbrains.com/dotnet/2023/11/09/net-annotated-monthly-november-2023/</link>
            <guid isPermaLink="true">https://blog.jetbrains.com/dotnet/2023/11/09/net-annotated-monthly-november-2023/</guid>
            <description><![CDATA[None]]></description>
            <content:encoded><![CDATA[
            <div style="font-family: Arial, sans-serif;">
                
                
                <p><p>Did you know? Just like you can keep your JetBrains products up-to-date with their <a href="https://www.jetbrains.com/toolbox-app/" rel="noopener" target="_blank">Toolbox App</a>, the open-source project <a href="https://www.marticliment.com/wingetui/" rel="noopener" target="_blank">WingetUI</a> can do the same for all your other Windows tools.</p>



<figure class="wp-block-image size-full"><img alt="" class="wp-image-404139" height="1440" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/dotnet-annotated-site-image-1280x720-1-1.png" width="2560" /></figure>



<h2 class="wp-block-heading">.NET news</h2>



<ul>
<li><a href="https://devblogs.microsoft.com/dotnet/dotnet-8-performance-improvements-in-dotnet-maui/" rel="noopener" target="_blank">.NET 8 Performance Improvements in .NET MAUI</a></li>



<li><a href="https://devblogs.microsoft.com/dotnet/performance-improvements-in-aspnet-core-8/" rel="noopener" target="_blank">Performance Improvements in ASP.NET Core 8</a></li>



<li><a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-8-rc2/" rel="noopener" target="_blank">Announcing .NET 8 Release Candidate 2</a></li>



<li><a href="https://devblogs.microsoft.com/dotnet/announcing-ef8-rc2/" rel="noopener" target="_blank">EF Core 8 Release Candidate 2: Smaller features in EF8</a></li>



<li><a href="https://devblogs.microsoft.com/dotnet/csharp-dev-kit-now-generally-available/" rel="noopener" target="_blank">C# Dev Kit – Now Generally Available</a></li>
</ul>



<h2 class="wp-block-heading">Featured content&nbsp;</h2>



<p><em>We’d like to thank </em><strong><em>Dennis Doomen</em></strong><em> for curating this month’s featured content! Dennis is a Microsoft MVP and Principal Consultant at Dutch consultancy firm</em><a href="https://avivasolutions.nl/" rel="noopener" target="_blank"><em> </em><em>Aviva Solutions</em></a><em>. With 27 years of experience under his belt as a coding architect, he specializes in designing full-stack enterprise solutions based on .NET as well as providing coaching on all aspects of designing, building, documenting, deploying and maintaining software systems in an agile world. He is the author of</em><a href="https://www.fluentassertions.com" rel="noopener" target="_blank"><em> </em><em>Fluent Assertions</em></a><em>, an assertion library with 300 million downloads,</em><a href="https://www.liquidprojections.net" rel="noopener" target="_blank"><em> </em><em>Liquid Projections</em></a><em>, a set of libraries for building Event Sourcing projections and he has been maintaining</em><a href="https://www.csharpcodingguidelines.com" rel="noopener" target="_blank"><em> </em><em>coding guidelines for C#</em></a><em> since 2001. You can find him on</em><a href="https://twitter.com/ddoomen" rel="noopener" target="_blank"><em> </em><em>Twitter</em></a><em>,</em><a href="https://mastodon.social/@ddoomen" rel="noopener" target="_blank"><em> </em><em>Mastodon</em></a><em> and</em><a href="https://bsky.app/profile/ddoomen.bsky.social" rel="noopener" target="_blank"><em> </em><em>BlueSky</em></a><em>.</em></p>



<ul>
<li>I’ve been a long-time fan of the GitKraken Git GUI and like to combine that with <a href="https://haacked.com/archive/2014/07/28/github-flow-aliases/" rel="noopener" target="_blank">some powerful</a> command-line aliases, but after watching Dan Clarke’s YouTube video on <a href="https://www.youtube.com/watch?v=Xzw6ttOIpnE" rel="noopener" target="_blank">Mastering Git in JetBrains Rider</a>, I discovered that I missed out on the amazing integrated source-control capabilities of Rider.<br /></li>



<li>Newer versions of C# bring a lot of power and both Rider and ReSharper will help you get the most out of it. But what if you’re still stuck on .NET Framework 4.x where the necessary .NET types needed for those new features don’t exist? Then you add the <a href="https://github.com/Sergio0694/PolySharp" rel="noopener" target="_blank">PolySharp</a> NuGet package to your project. It’ll add the missing types and attributes and light up your project with newer C# features.<br /></li>



<li>There seems to be a group of people that are concerned about the increasing presence of AI in our development toolchain. Well, I’m definitely not. I use a combination of GitHub CoPilot and the new JetBrains <a href="https://blog.jetbrains.com/idea/2023/06/ai-assistant-in-jetbrains-ides/">AI Assistant</a> and it has made a world of difference. Not only did it make me a lot more productive by removing repetitive work and providing mind-blowingly smart suggestions for my code, it also helped me understand and refactor some pretty ugly legacy code. So don’t be concerned and embrace AI!<br /></li>



<li>One of the characteristics of maintainable code is that you can understand what it intends to do. Well-written en well-factored code can help with that. But what if you want to understand <em>why</em> that code was written, what options were considered and what the intent was? A technical decision log can help with that, but a clean source control history as well. Being able to master Git’s fixup commits and interactive rebase functionality is crucial for that, so make sure you <a href="https://www.continuousimprover.com/2020/03/keep-source-control-history-clean.html#dealing-with-code-review-comments" rel="noopener" target="_blank">know your tools</a>. <br /></li>
</ul>



<ul>
<li>In the 15 years I’ve been practicing Test Driven Development, I’ve learned that finding the right scope for what most people refer to as the “unit” is one of the most crucial choices to make. The idea of a unit always being a class or smaller is way too dogmatic, so I tried to provide <a href="https://www.continuousimprover.com/2023/04/unit-testing-scope.html" rel="noopener" target="_blank">some examples</a> to debunk that idea.<br /></li>



<li>In the past, we’ve been trained to create complicated abstractions to hide the “ugly” parts of our system such as the database. But it’s 2023 and databases should be treated as highly optimized implementation details of your architecture. As such, you want to include the interaction with the database in your automated tests. Fortunately we have Docker and open-source projects like <a href="https://dotnet.testcontainers.org/" rel="noopener" target="_blank">Test Containers for .NET</a> that allow you to spin up a Linux container with SQL Server in it, run a set of test cases and clean up after yourself. Simple and brilliant. <br /></li>



<li>You may have heard the fuss around Moq and its attempts to monetize open-source. As a long-time OSS developer, I know that it’s hard to make companies realize how much value they get from OSS. I’ve tried to <a href="https://www.continuousimprover.com/2023/06/funding-open-source.html" rel="noopener" target="_blank">capture some ideas</a> on how to help with that, but I’ve also started to dedicate a small amount of money to a different project every month. What about you?<br /></li>



<li>Talking about contributing to the open-source community, now is the time to help influence an open-source project with 300 million downloads, Fluent Assertions. We’re working on the next major version and there are plenty of ideas to keep it ahead of competition. Go check out the roadmap <a href="https://github.com/orgs/fluentassertions/projects/1" rel="noopener" target="_blank">here</a> or pick-up one of the <a href="https://github.com/fluentassertions/fluentassertions/issues?q=is%3Aopen+is%3Aissue+label%3Aup-for-grabs" rel="noopener" target="_blank">contribution-friendly issues</a>.&nbsp;</li>
</ul>



<h2 class="wp-block-heading">Programing tutorials and tips&nbsp;</h2>



<p><strong>.NET tutorials and tips</strong></p>



<ul>
<li><a href="https://poornimanayar.co.uk/blog/code-demos-made-easy-with-jetbrains-rider-live-templates/" rel="noopener" target="_blank">Code demos made easy with JetBrains Rider Live Templates</a> &#8211; Are you nervous about that upcoming presentation? Let Poornima Nayar walk you through code demos, the easy way.</li>



<li><a href="https://medium.com/@dench327/rider-plugin-development-basics-3a246b8a1a31" rel="noopener" target="_blank">Rider Plugin Development | Basics</a> &#8211; Sometimes you have a specific technical scenario that other companies don’t, and it would benefit from some IDE customizations. Denys Semko shows you how to get that plugin up and running.</li>



<li><a href="https://www.youtube.com/watch?v=_M0IgtGWnvE" rel="noopener" target="_blank">The Easiest Way to Create PDFs in .NET</a> &#8211; Everyone has to generate a PDF with C# at some point in their .NET career. And this video tutorial by Nick Chapsas demonstrates how to do just that, using QuestPDF.</li>



<li><a href="https://www.syncfusion.com/blogs/post/ocr-pdf-files-using-csharp.aspx" rel="noopener" target="_blank">Optical Character Recognition (OCR) Made Easy with the .NET PDF Library in C#</a> &#8211; And this article by Sowmiya Loganathan expands on creating PDFs by using OCR to do it!</li>



<li><a href="https://blog.nimblepros.com/blogs/creating-test-objects-via-design-patterns/" rel="noopener" target="_blank">Creating Test Objects via Design Patterns</a> &#8211; We often think about patterns in code but often less so, patterns in tests. Sarah Dutkiewicz reviews three patterns you can use to help you write better tests.&nbsp;</li>



<li><a href="https://askxammy.com/creating-animated-login-ui-in-net-maui-with-lottie/" rel="noopener" target="_blank">Creating Animated Login UI in .NET MAUI with Lottie</a> &#8211; Nice touches like an animated login are no longer nice touches, but features users have come to expect. So learn how to spice up that login with this post by Leomaris Reyes.</li>



<li><a href="https://www.telerik.com/blogs/crud-operations-ef-core-migrations-telerik-ui-net-maui-part-1" rel="noopener" target="_blank">CRUD Operations &amp; EF Core Migrations with Telerik UI for .NET MAUI (Part 1)</a> &#8211; Forms over data that include CRUD operations are the daily drivers of businesses everywhere.&nbsp; Rossitza Fakalieva shows us how to write code to support this core business pattern.</li>



<li><a href="https://codeopinion.com/code-review-refactoring-to-a-better-design/" rel="noopener" target="_blank">Code Review &amp; Refactoring to a Better Design</a> &#8211; Derek Comartin has published this awesome post on code reviews and refactoring, so that you can incorporate a continuous, better, design.</li>



<li><a href="https://andrewlock.net/series/exploring-the-dotnet-8-preview/" rel="noopener" target="_blank">Series: Exploring the .NET 8 preview</a> &#8211; Andrew Lock has been working on this fantastic series (12 parts and counting) on all things .NET 8. This is where to go for the latest .NET info.</li>



<li><a href="https://goatreview.com/bi-directional-grpc-stream-cache-server-csharp/" rel="noopener" target="_blank">Bi-Directional gRPC Stream Cache Server in C#</a> &#8211; This is a nice post by Cyril Canovas has a lot of good stuff in it. It takes the complex concetp of bi-directional streaming and condenses it into a readable post and code. Definitely check it out.</li>



<li><a href="https://nestenius.se/2023/10/09/debugging-cookie-problems/" rel="noopener" target="_blank">Debugging cookie problems in ASP.NET Core</a> &#8211; In the early days of the web the cookie was just a text file to track a bit of info across requests. Now, cookies are the basis of ad platforms and all sorts of advertising mayhem. So as developers we have to watch out for the issues that can arise, as blogged by Tore Nestenius.</li>



<li><a href="https://laurentkempe.com/2023/10/24/simplify-your-dotnet-docker-image-publishing-workflow-with-the-dotnet-sdk/" rel="noopener" target="_blank">Simplify your .NET Docker image publishing workflow with the .NET SDK</a> and <a href="https://laurentkempe.com/2023/10/30/publish-dotnet-docker-images-using-dotnet-sdk-and-github-actions/" rel="noopener" target="_blank">Publish .NET Docker images using .NET SDK and GitHub Actions</a> &#8211; Laurent Kempé has some nice articles on all things .NET and Docker. If you’re investigating any workflow or deployment enhancements and automations, you want to check out these posts.</li>



<li><a href="https://www.telerik.com/blogs/blazor-basics-event-callbacks" rel="noopener" target="_blank">Blazor Basics: Blazor Event Callbacks</a> &#8211; How does Blazor do events? Callbacks? Claudio Bernasconi explains it all here.</li>



<li><a href="https://chrlschn.dev/blog/2023/10/dotnet-task-parallel-library-vs-system-threading-channels/" rel="noopener" target="_blank">.NET Task Parallel Library vs System.Threading.Channels</a> &#8211; Is <code>System.Threading.Channels</code> better than .NET TPL? Charles Chen reports his findings after investigating each one.</li>



<li><a href="https://devblogs.microsoft.com/dotnet/the-convenience-of-system-text-json/" rel="noopener" target="_blank">The convenience of System.Text.Json</a> &#8211; Richard Lander dives deep into the <code>System.Text.Json</code> namespace to demonstrate performance, common usages, and where the code is convenient to use.&nbsp;</li>



<li><a href="https://khalidabuhakmeh.com/global-endpoint-filters-with-aspnet-core-minimal-apis" rel="noopener" target="_blank">Global Endpoint Filters with ASP.NET Core Minimal APIs</a> &#8211; Our own JetBrainer Khalid Abuhakmeh has published this very handy piece on Global Endpoint Filters in ASP.NET Core Minimal APIs.</li>
</ul>



<p></p>



<p><strong>Related programming tutorials and tips:</strong></p>



<ul>
<li><a href="https://eisenbergeffect.medium.com/html-attributes-properties-and-values-752b6eed8c21" rel="noopener" target="_blank">HTML Attributes, Properties, and Values</a> &#8211; Rob Eisenberg goes back to basics here with this post on HTML fundamentals.</li>



<li><a href="https://www.youtube.com/watch?v=uIfGIlD3lnw" rel="noopener" target="_blank">The WORST Domain Modeling Mistakes!</a> &#8211; Derek Comartin covers workflows, data and organizational structure, but throws in a plot twist: The problem is people.&nbsp;</li>
</ul>



<p></p>



<p>This really does feel like 2002 all over again. &#x1f605; Drop a comment, folks: what do you think of this code?</p>



<figure class="wp-block-embed is-type-rich is-provider-twitter wp-block-embed-twitter"><div class="wp-block-embed__wrapper">
<blockquote class="twitter-tweet"><p dir="ltr" lang="en">Wait a min! This feels like 2002 all over again 🤔 <a href="https://t.co/1GzRCA8UeB" target="_blank">https://t.co/1GzRCA8UeB</a></p>&mdash; Corey W (@coreylweathers) <a href="https://twitter.com/coreylweathers/status/1717855547171451286?ref_src=twsrc%5Etfw" rel="noopener" target="_blank">October 27, 2023</a></blockquote>
</div></figure>



<h2 class="wp-block-heading">Interesting and cool stuff</h2>



<ul>
<li><a href="https://www.youtube.com/watch?v=XZ3w_jec1v8" rel="noopener" target="_blank">The Economics of Programming Languages&#8221; (Strange Loop 2023)</a> &#8211; Evan Czaplicki, talks about the economics of doing all the jobs needed to launch a software product.&nbsp;</li>
</ul>



<h2 class="wp-block-heading">And finally, the latest from JetBrains</h2>



<p>Here’s a chance to catch up on JetBrains news that you might have missed:</p>



<p>&#x1f5fa;&#xfe0f; Check out our <a href="https://www.jetbrains.com/dotnet/guide/" rel="noopener" target="_blank">.NET Guide</a>! Tutorials, tips, and tricks on .NET. &#x1f4fa;</p>



<p><strong>Blog posts, webinars, etc..:</strong></p>



<ul>
<li><a href="https://blog.jetbrains.com/dotnet/2023/10/25/recordings-from-jetbrains-gamedev-day-2023-are-available/">Recordings From JetBrains GameDev Day 2023 Are Available</a></li>



<li><a href="https://blog.jetbrains.com/dotnet/2023/09/21/eager-lazy-and-explicit-loading-with-entity-framework-core/">Eager, Lazy and Explicit Loading with Entity Framework Core</a></li>
</ul>



<p></p>



<p>Don’t miss this fantastic offer! <a href="https://www.codemag.com/" rel="noopener" target="_blank">CODE Magazine</a> is offering a <a href="https://www.codemag.com/subscribe/jetbrains?jb_newsletter&amp;amp;utm_medium=email&amp;amp;utm_campaign=free-subs" rel="noopener" target="_blank">free subscription</a> to JetBrains customers. Get your copy today!</p>



<p>Sharing is caring! So share content that you find useful with other readers. Don’t keep it to yourself! Send us an <a href="mailto:dotnet-advocates@jetbrains.com">email</a> with your suggestions for publication in future newsletters!</p>



<p align="center"><a class="jb-download-button" href="https://info.jetbrains.com/Dotnet-Annotated-Subscription.html" rel="noopener" target="_blank">Subscribe to .NET Annotated</a></p></p>
            </div>
        ]]></content:encoded>
            <pubDate>Thu, 09 Nov 2023 12:45:41 +0000</pubDate>
        </item>
        
        <item>
            <title>Amper – Improving the Build Tooling User Experience</title>
            <link>https://blog.jetbrains.com/blog/2023/11/09/amper-improving-the-build-tooling-user-experience/</link>
            <guid isPermaLink="true">https://blog.jetbrains.com/blog/2023/11/09/amper-improving-the-build-tooling-user-experience/</guid>
            <description><![CDATA[None]]></description>
            <content:encoded><![CDATA[
            <div style="font-family: Arial, sans-serif;">
                
                
                <p><p>Time and time again people adopting Kotlin have told us that they find dealing with build systems challenging. While many projects use wizards to configure environments so they’re ready for developers to get started, these also need to be maintained. New modules, platforms, dependencies, and other changes happen, which often leads to developers spending more time fighting the build system and the IDE than actually focusing on the work they need to do. With Kotlin becoming a truly multiplatform language, this is emphasized even further with folks who are new to the JVM ecosystem.</p>



<p>For some time now, we’ve been working on a series of experiments internally at JetBrains to try and see how we could make this experience better for developers – not just from the perspective of defining projects, but also by providing better tooling support. These efforts are in sync with the <a href="https://blog.jetbrains.com/kotlin/2023/11/kotlin-multiplatform-tooling-in-fleet/" rel="noreferrer noopener" target="_blank">other initiatives</a> we’re working on in regards to <a href="https://www.jetbrains.com/kotlin-multiplatform/" rel="noreferrer noopener" target="_blank">Kotlin Multiplatform</a>.</p>



<p>Today, we’re excited to share one such project, Amper, publicly. Before proceeding, however, a disclaimer – it’s still very much experimental, and our main goal for opening it up is to validate the ideas behind it and get your feedback.</p>



<h2 class="wp-block-heading">What is Amper?</h2>



<p>Amper is a tool for project configuration. Its goal is to improve the project configuration user experience and toolability, that is, the support inside the IDE, while also providing a smooth out-of-the box experience.&nbsp;</p>



<p>We’re currently looking at various aspects, including the configuration of projects for the purpose of building, packaging, publishing, and more. At its current stage, however, the focus is primarily on configuring projects for the purpose of building.</p>



<p>While the current use case is Kotlin and Kotlin Multiplatform, Amper also supports Java and Swift (as a requirement for multiplatform). However, the same approach to configuration could work for other languages and technology stacks in the future.&nbsp;</p>



<p>Amper is implemented as a Gradle plugin and uses YAML for its project configuration format. The goal right now is to validate the user experience, which is why we have chosen to build on a well-tested build tool like Gradle, providing a configuration layer on top of it.</p>



<p>In regards to using YAML, some of you may be wondering, why not Kotlin? While the decision on this markup language is not final, we do want to take a declarative approach. We believe that this not only allows for a more simplified configuration that is less error-prone, but it also helps us in terms of providing better tooling. And again, for the sake of sharing this experiment with you and validating ideas behind it, we’ve taken the simplest approach. Whether or not we’ll end up with a restrictive subset of Kotlin as the frontend language is yet to be decided. For now, our focus is on validating our ideas.&nbsp;</p>



<h2 class="wp-block-heading">Show me the code!</h2>



<p>Let’s take a very basic JVM &#8220;Hello, World!&#8221; project with the following directory structure in IntelliJ IDEA 2023.3:</p>



<figure class="wp-block-image size-full is-resized"><img alt="" class="wp-image-404254" height="573" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/ij-jvm-structure.png" style="width: 411px;" width="822" /></figure>



<p>The <code>main.kt</code> and <code>MyTest.kt</code> files are just regular Kotlin files with nothing special in them. The interesting part is <code>module.yaml</code>, which is the Amper manifest file. For the above project structure, it would simply be:</p>



<pre class="EnlighterJSRAW"># Produce a JVM application 

product: jvm/app</pre>



<p>That&#8217;s it. The Kotlin and Java toolchains, test framework, and other necessary functionality is configured and available straight out of the box. You can build it, run it, write and run tests, and more. For more detailed information, check out the <a href="https://github.com/JetBrains/amper/tree/main/examples/jvm-with-tests" rel="noreferrer noopener" target="_blank">full example</a>.</p>



<figure class="wp-block-image size-full"><img alt="" class="wp-image-404299" height="1718" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/ij-jvm-result-1.png" width="2472" /></figure>



<p>Now, let&#8217;s look at a Compose Multiplatform project with Android, iOS, and desktop JVM apps, with the following project structure in Fleet:</p>



<figure class="wp-block-image size-full is-resized"><img alt="" class="wp-image-404277" height="1130" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/fleet-kmp-structure.png" style="width: 460px;" width="980" /></figure>



<p>Notice how the <code>src/</code> folder contains Kotlin and Swift code together. It could, of course, also be Kotlin and Java.</p>



<p>Another aspect to highlight is the shared module with the common code in the <code>src</code> folder and the platform-specific code folders <code>src@ios</code> and <code>src@android</code> (learn more about <a href="http://github.com/JetBrains/amper/tree/main/docs/Documentation.md#project-layout" rel="noreferrer noopener" target="_blank">project layouts</a>).</p>



<p>Here’s how the <code>ios-app/module.yaml</code> manifest file looks:</p>



<pre class="EnlighterJSRAW"># Produce an iOS application

product: ios/app

# Depend on the shared library module: 

dependencies:

  - ../shared

settings:

  # Enable Compose Multiplatform framework

  compose: enabled</pre>



<p>This is pretty straightforward: It defines an iOS application with a dependency on a shared module and enables the Compose Multiplatform framework. A more interesting example would be <code>shared/module.yaml</code>: </p>



<pre class="EnlighterJSRAW"># Produce a shared library for the JVM, Android, and iOS platforms:

product:

  type: lib

  platforms: [jvm, android, iosArm64, iosSimulatorArm64, iosX64]

# Shared Compose dependencies:

dependencies:

  - org.jetbrains.compose.foundation:foundation:1.5.0-rc01: exported

  - org.jetbrains.compose.material3:material3:1.5.0-rc01: exported

# Android-only dependencies  

dependencies@android:

  # integration compose with activities

  - androidx.activity:activity-compose:1.7.2: exported

  - androidx.appcompat:appcompat:1.6.1: exported

# iOS-only dependencies with a dependency on a CocoaPod

#   note that CocoaPods dependencies are not yet implemented in the prototype     

dependencies@ios:

  - pod: 'FirebaseCore'

    version: '~> 6.6'

settings:

  # Enable Kotlin serialization

  kotlin:

    serialization: json

  # Enable Compose Multiplatform framework

  compose: enabled</pre>



<p>A couple of things are worth mentioning. First, note the platform-specific <code>dependencies:</code> sections with the <code>@&lt;platform&gt;</code> qualifier. <a href="https://github.com/JetBrains/amper/tree/main/docs/Documentation.md#platform-qualifier" rel="noreferrer noopener" target="_blank">The platform qualifier</a> can be used both in the manifest and also in the file layout. The qualifier organizes the code, dependencies, and settings for a certain platform.<br />Second, the dependencies: section allows not only Kotlin and Maven dependencies, but potentially also <a href="https://github.com/JetBrains/amper/tree/main/docs/Documentation.md#native-dependencies" rel="noreferrer noopener" target="_blank">platform-specific package managers</a>, such as CocoaPods, Swift Package Manager, and others based on the feedback we receive.</p>



<figure class="wp-block-image size-full"><img alt="" class="wp-image-404288" height="1744" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/fleet-kmp-result.png" width="2756" /></figure>



<p>Naturally, these examples show only a limited set of Amper features. Check out <a href="https://github.com/JetBrains/amper" rel="noreferrer noopener" target="_blank">the project on GitHub</a> and look at the <a href="https://github.com/JetBrains/amper/tree/main/docs/Documentation.md" rel="noreferrer noopener" target="_blank">documentation</a>, <a href="https://github.com/JetBrains/amper/tree/main/docs/Tutorial.md" rel="noreferrer noopener" target="_blank">tutorial</a>, and <a href="https://github.com/JetBrains/amper/tree/main/examples" rel="noreferrer noopener" target="_blank">example projects</a> to get more insight into Amper’s design and functionality.</p>



<h3 class="wp-block-heading">What it currently supports</h3>



<p>Amper currently supports creating applications targeting the JVM, Android, iOS, macOS, and Linux platforms. You can create applications based on both Kotlin (single and multiplatform) and Java.</p>



<p>Given that Amper is using Gradle as the backend, support for custom tasks, the ability to publish libraries to Maven, CocoaPods support, and the ability to package desktop apps are all provided via configuring the Gradle build-files directly.</p>



<h2 class="wp-block-heading">How to try it&nbsp;</h2>



<p>There are multiple ways to try Amper.</p>



<ul>
<li>In <a href="https://www.jetbrains.com/idea/nextversion/" rel="noopener" target="_blank">IntelliJ IDEA</a> 2023.3 as of build 233.11555, for JVM and Android projects.</li>



<li>In <a href="https://www.jetbrains.com/fleet/download" rel="noopener" target="_blank">Fleet</a> as of build 1.26.104, for the JVM, Android, and Kotlin Multiplatform projects.</li>



<li>Using Gradle to build Amper projects from the CLI or CI/CD.</li>
</ul>



<p>Check out the <a href="https://github.com/JetBrains/amper/blob/main/docs/Setup.md" rel="noopener" target="_blank">setup instructions</a>.</p>



<p>We’ve also prepared some <a href="https://github.com/JetBrains/amper/tree/main/examples" rel="noopener" target="_blank">samples</a>, as well as a <a href="https://github.com/JetBrains/amper/tree/main/docs/Tutorial.md" rel="noopener" target="_blank">tutorial</a>. In addition you can find more detailed <a href="https://github.com/JetBrains/amper/tree/main/docs/Documentation.md" rel="noopener" target="_blank">documentation</a> that covers different aspects of Amper.</p>



<h3 class="wp-block-heading">We need your feedback</h3>



<p>The project is at a stage where we desperately need your feedback. We’d love for you to give it a try and tell us whether it is simpler for defining projects or what use cases you’d need it to cover. Any feedback you may have is more than welcome. Please feel free to submit your suggestions and ideas using our <a href="https://youtrack.jetbrains.com/issues/AMPER" rel="noopener" target="_blank">issue tracker</a>, as comments in this post, or by joining our public <a href="https://kotlinlang.slack.com/archives/C062WG3A7T8" rel="noopener" target="_blank">Slack channel</a> and posting them there.</p>



<h2 class="wp-block-heading">A few final words</h2>



<p>We’ve prepared an <a href="https://github.com/JetBrains/amper/tree/main/docs/FAQ.md" rel="noopener" target="_blank">FAQ</a> below which should answer some of the questions you may have. However, we wanted to explicitly address a few points.</p>



<p>First and foremost, we are fully committed to supporting technologies such as Maven and Gradle in IntelliJ IDEA and Fleet. This project does not change our commitment to these technologies, and we continue to work very closely with our partners on this front.</p>



<p>Second, at its current stage, Amper is not a standalone build tool. While we have many ideas as to how we would like to drive the product forward, we also need to validate the things we’re currently working on before developing Amper further.&nbsp;</p>



<p>We hope other questions you may have are addressed in the <a href="https://github.com/JetBrains/amper/tree/main/docs/FAQ.md" rel="noopener" target="_blank">FAQ</a>. If not, please feel free to ask us in the comments, and we’ll do our best to answer them.</p></p>
            </div>
        ]]></content:encoded>
            <pubDate>Thu, 09 Nov 2023 10:07:24 +0000</pubDate>
        </item>
        
        <item>
            <title>ReSharper 2023.3 EAP 6: Code Analysis Performance Improvements, Support for C# 12 Interceptors, and Much More.</title>
            <link>https://blog.jetbrains.com/dotnet/2023/11/08/resharper-2023-3-eap-6/</link>
            <guid isPermaLink="true">https://blog.jetbrains.com/dotnet/2023/11/08/resharper-2023-3-eap-6/</guid>
            <description><![CDATA[None]]></description>
            <content:encoded><![CDATA[
            <div style="font-family: Arial, sans-serif;">
                
                
                <p><p>The latest installment in the ReSharper 2023.3 Early Access Program has just been released, and it’s packed with updates.&nbsp;</p>



<p>Before you download it, let’s take a look at the changes.</p>



<figure class="wp-block-image size-full"><img alt="" class="wp-image-390855" height="1440" src="https://blog.jetbrains.com/wp-content/uploads/2023/09/Blog_Featured_image_1280x720_ReSharper-2x.png" width="2560" /></figure>



<h2 class="wp-block-heading">Code analysis performance improvements</h2>



<p>ReSharper 2023.3 can now recognize and facilitate more scenarios where code analysis services can operate incrementally when interrupted by typing. This improvement is particularly beneficial for handling large files. The incremental approach ensures that only the necessary portions of the code are re-inspected when developers are still editing a file while the code analysis is ongoing. This speeds up continuous code analysis and conserves battery life on laptops.</p>



<h2 class="wp-block-heading">Reworked UX for the <em>Extract local functions</em> refactoring</h2>



<p>We&#8217;ve revamped the user experience for the <em>Extract local function</em> refactoring. In the past, selecting a location for the new function from the list of available options was challenging, and it wasn&#8217;t clear what would be affected by that choice.</p>



<p>With the updated UX, you&#8217;ll now see a preview of the new function&#8217;s signature directly in the code editor. This makes it easy to understand precisely where it will be inserted and how your choice will impact the introduced function. You can also see which variables will be transformed into parameters rather than closures, and which other functions will be relocated to allow calls at the new location.</p>



<figure class="wp-block-image"><img alt="" src="https://lh7-us.googleusercontent.com/Nnwwnlxp0D6rJ20GhszjXh7Mxkm9r0ihbjC8jIuSiqB9eOHgcM0FJcRq_DfiNn64WjdPK7VkLggjQ_zmw93VFinSAWM1mfDSIjaQy3hQA3CWNy9EU2JE0qk1b_EJSe3BZc2FglnsJTuNugKl9xYVDE4" /></figure>



<h2 class="wp-block-heading">Support for C# 12 interceptors</h2>



<p>The latest version of C# has introduced an experimental feature called <a href="https://github.com/dotnet/roslyn/blob/main/docs/features/interceptors.md" rel="noopener" target="_blank">interceptors</a>. This feature leverages the new [InterceptsLocation] attribute, which enables you to intercept and redirect specific method calls within your application to an interceptor instead of the original method. This can be used for optimization, as you’ll be able to fine-tune the interceptor method along with its exact arguments for a particular call site at compile time.&nbsp;</p>



<p>However, some source generators may override certain calls in your program and replace them with their own code.</p>



<p>ReSharper 2023.3 will alert you to an intercepted call with an inlay hint icon, which can take you to the interceptor with a single <kbd>Ctrl</kbd>+<kbd>Click</kbd>. It&#8217;s also now possible to navigate back from the <code>[InterceptsLocation]</code> attribute to the exact code position it intercepts. The same navigation actions are also available from the <kbd>Alt</kbd>+<kbd>Enter</kbd> menu.</p>



<p>You might want to exclude certain generators from adding visual noise to the editor. For instance, you may not be interested in the latest ASP.NET Core <a href="https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-8-preview-7/#native-aot" rel="noopener" target="_blank">being able to generate interceptors to optimize your .MapGet calls</a>. To prevent calls intercepted by a particular framework from being displayed, you can add the fully qualified name of the generator responsible for producing interceptor methods to the exclusion list in ReSharper’s settings. Alternatively, you can also do so with <kbd>Alt</kbd>+<kbd>Enter</kbd> and context menus available directly from the inlay hint indicating the intercepted call. This means you don&#8217;t need to type the full name of the generator, or even know it beforehand to configure this behavior.</p>



<h2 class="wp-block-heading">Reworked integration of ReSharper and Visual Studio Quick Actions</h2>



<p>Visual Studio and ReSharper’s quick actions can complement each-other well when used discerningly. With ReSharper 2023.3 you can easily leverage the power of both systems. You can now tweak the settings to either use ReSharper’s quick actions exclusively, display suggestion icons for both, or invoke all quick actions from a single access point – the ReSharper bulb menu. </p>



<figure class="wp-block-image size-full"><img alt="" class="wp-image-404205" height="1189" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/image-9.png" width="1538" /></figure>



<p>We’ve also optimized Visual Studio’s Quick Actions retrieval, improving the performance.</p>



<h2 class="wp-block-heading">New code formatting engine for Razor</h2>



<p>ReSharper 2023.3 introduces a new formatting engine for Razor. It’s compatible with the current ReSharper&#8217;s C# formatter, thus supporting C# language constructs introduced in recent years and most of ReSharper&#8217;s new formatting options for C#. The new formatter also operates faster and is expected to have fewer issues. However, it does modify the default formatting for some code. Therefore, we have introduced an option to revert to the old formatting engine for Razor. You can find it in ReSharper’s Options under <em>Code Editing | C# | Formatting style | Other</em>. </p>



<figure class="wp-block-image size-full"><img alt="" class="wp-image-404194" height="600" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/image-8.png" width="1200" /></figure>



<h2 class="wp-block-heading">Improved support for projects that use StyleCop.Analyzers code style inspections</h2>



<p><code>StyleCop.Analyzers</code> configuration files are now detected automatically in the projects where they are enabled, and StyleCop-related defaults are now provided even when no config files are present.</p>



<h2 class="wp-block-heading">File header templating overhaul</h2>



<p>Arbitrary file header variables can now be configured in the <a href="https://www.jetbrains.com/help/resharper/File_Header_Style.html#configure-file-header-in-settings" rel="noopener" target="_blank">file header settings page</a>. Also, there is now support for the StyleCop.Analyzers external file header templating. The <em>Update file header</em> <a href="https://www.jetbrains.com/help/resharper/File_Header_Style.html#insert-file-header-into-existing-files-with-code-cleanup" rel="noopener" target="_blank">cleanup stage</a> should now correctly use it when the StyleCop.Analyzers are configured for the project that the cleaned up file belongs to.</p>



<h2 class="wp-block-heading">С++ updates</h2>



<p>The EAP 6 build brings updates for HLSL support, code completion inside inactive preprocessor branches, a new inlay hint for forwarding references, and other updates.&nbsp;</p>



<p>For more information, please check out<a href="https://blog.jetbrains.com/rscpp/2023/11/06/resharper-cpp-2023-3-eap-hlsl-updates/"> this </a><a href="https://blog.jetbrains.com/rscpp/2023/11/08/resharper-cpp-2023-3-eap-hlsl-updates/">dedicated</a><a href="https://blog.jetbrains.com/rscpp/2023/11/06/resharper-cpp-2023-3-eap-hlsl-updates/"> blog post</a>. </p>



<h2 class="wp-block-heading">New inspections for identifying vulnerable API usages</h2>



<p>ReSharper 2023.3 brings a new security inspection feature designed to make published vulnerabilities more apparent and easier to understand.</p>



<p>The new inspections identify vulnerable NuGet packages in your project and highlight instances where vulnerable methods from these libraries are used in your code. If a vulnerability is detected, the system highlights the problematic code and offers quick actions to remedy it. These actions include recommending an update to a newer version of the package and offering in-depth information about the detected vulnerabilities.</p>



<figure class="wp-block-image"><img alt="" src="https://lh7-us.googleusercontent.com/nIJzoxcXbnZpii5rE0wSNdQL_E4X_atGOKdQJzbcEANQrv9fKcyFiKhtwGx-HLNMfS4BQPioqq8qCC1S_K90AI-YS3Ma84TtGS4N_snTwFq6-lpCduDf826F5U6iwrFI6oASNS5xOQJ5MDA2dIMIobU" /></figure>



<p>That’s it for now! For the full list of changes included in this build, please go to <a href="https://youtrack.jetbrains.com/issues/RSRP?q=Available%20in:%20%7B2023.3%20EAP%206%7D%20" rel="noopener" target="_blank">our issue tracker</a>.&nbsp;</p>



<p>As always, we’d be happy to hear from you. Tell us what you think about the latest changes in the comments section below or<a href="https://twitter.com/resharper" rel="noopener" target="_blank"> on X</a> (formerly Twitter).&nbsp;</p></p>
            </div>
        ]]></content:encoded>
            <pubDate>Wed, 08 Nov 2023 18:13:51 +0000</pubDate>
        </item>
        
        <item>
            <title>ReSharper C++ 2023.3 EAP: HLSL Updates and Completion in Inactive Code</title>
            <link>https://blog.jetbrains.com/rscpp/2023/11/08/resharper-cpp-2023-3-eap-hlsl-updates/</link>
            <guid isPermaLink="true">https://blog.jetbrains.com/rscpp/2023/11/08/resharper-cpp-2023-3-eap-hlsl-updates/</guid>
            <description><![CDATA[None]]></description>
            <content:encoded><![CDATA[
            <div style="font-family: Arial, sans-serif;">
                
                
                <p><p>The new Early Access Program build is here with updates for HLSL support, code completion inside inactive preprocessor branches, a new inlay hint for forwarding references, and other updates. Read on for more details and check out the <a href="https://youtrack.jetbrains.com/issues/RSCPP?q=Available%20in:%20%7B2023.3%20EAP%206%7D%20" rel="noopener" target="_blank">full list of issues</a> we’ve fixed in this update.</p>
<p>You can download the free EAP builds from our website or via the <a href="https://www.jetbrains.com/toolbox-app" rel="noopener" target="_blank">Toolbox App</a>.</p>
<p align="center"><a class="jb-download-button" href="https://www.jetbrains.com/resharper/nextversion/" rel="noopener" target="_blank"><i class="download-icon"></i>DOWNLOAD RESHARPER C++ EAP</a></p>
<h2 id="hlsl_updates">HLSL updates</h2>
<p>It’s been a while since we last introduced improvements for HLSL support. Meanwhile, the HLSL standard brought a few new language features, so it’s time to catch up. HLSL 2021 introduced C++-like templates for structs and functions with full specializations and template parameter inference where possible. With the latest ReSharper C++ update, you get full support for HLSL templates:<br />
<img alt="HLSL template" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/hlsl_template.png" width="600" /><br />
This EAP build also introduces support for <code>RayQuery</code> and brings all of the corresponding flags to the code completion list:<br />
<img alt="HLSL RayQuery" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/hlsl_rayquery.png" width="600" /></p>
<h2 id="working_with_inactive_code">Working with inactive code</h2>
<p>With platform or configuration-specific code, you can often find yourself editing currently inactive code blocks inside conditional preprocessor branches. Previously, code completion in inactive code only offered macros. In this EAP build, we&#8217;ve improved code completion in these scenarios to include symbols from the global scope:<br />
<img alt="Completion in inactive code" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/completion_inside_inactive_if.png" width="600" /></p>
<p>We’ve also updated <em>Find Usages</em> to find possible usages in inactive code and macro bodies. Previously, if you wanted to find these usages you had to use <em>Find Usages Advanced</em> and investigate textual occurrences. Now <em>Find Usages</em> results include potential usages in macro bodies and inactive code by default. These usages are grouped into separate sections to distinguish them from usages in normal code:<br />
<img alt="Find possible usages" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/find_possible_usages.png" width="600" /></p>
<h2 id="other_improvements">Other improvements</h2>
<p>Reference inlay hints now have a separate <code>[&gt;&gt;]</code> text to spot forwarding references at a glance:<br />
<img alt="Forwarding reference" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/reference_hint.png" width="600" /><br />
Another update is for C support: ReSharper C++ now supports the C99 <code>restrict</code> type qualifier that can be used in pointer declarations.<br />
<img alt="C99 restrict" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/c_restrict.png" width="600" /></p>
<p>To improve the code navigation experience, symbols that came from macro substitutions are now hidden from <em>Go to</em> and the <em>File Structure</em> window. This is helpful when working with unit tests, for example, since macros defined by unit testing frameworks often introduce many auxiliary symbols during their expansion.</p>
<p>We’ve also added a new formatting setting for the braces layout to allow comments after <code>{</code>.</p>
<p>Those are all the highlights of this EAP build! If you encounter any issues, don’t hesitate to report them to our <a href="https://youtrack.jetbrains.com/issues/RSCPP" rel="noopener" target="_blank">issue tracker</a>.</p>
<p align="center"><a class="jb-download-button" href="https://www.jetbrains.com/resharper/nextversion/" rel="noopener" target="_blank"><i class="download-icon"></i>DOWNLOAD RESHARPER C++ EAP</a></p>
<p><em>Your ReSharper C++ team</em><br />
JetBrains<br />
The Drive to Develop</p></p>
            </div>
        ]]></content:encoded>
            <pubDate>Wed, 08 Nov 2023 18:13:43 +0000</pubDate>
        </item>
        
        <item>
            <title>OSS Power-Ups: MassTransit – Webinar Recording</title>
            <link>https://blog.jetbrains.com/dotnet/2023/11/08/oss-power-ups-masstransit-webinar-recording/</link>
            <guid isPermaLink="true">https://blog.jetbrains.com/dotnet/2023/11/08/oss-power-ups-masstransit-webinar-recording/</guid>
            <description><![CDATA[None]]></description>
            <content:encoded><![CDATA[
            <div style="font-family: Arial, sans-serif;">
                
                
                <p><p>The recording of our webinar, <strong>OSS Power-Ups: MassTransit</strong>, with <a href="https://twitter.com/PhatBoyG" rel="noopener" target="_blank">Chris Patterson</a>, is available. This was the <strong>thirteenth episode</strong> of our <a href="https://lp.jetbrains.com/oss-powerups/" rel="noreferrer noopener" target="_blank">OSS Power-Ups</a> series, where we put a spotlight on open-source .NET projects. <a href="https://www.jetbrains.com/community/newsletters/" rel="noreferrer noopener" target="_blank">Subscribe to our community newsletter</a>&nbsp;to receive notifications about future webinars.</p>



<hr class="wp-block-separator has-css-opacity" />



<p><em>Join Chris Patterson, the author of <a href="https://masstransit.io/" rel="noopener" target="_blank">MassTransit</a>, for an insightful webinar as we delve into the messaging patterns supported by MassTransit. In today&#8217;s rapidly evolving tech landscape, efficient communication between software components is more crucial than ever. MassTransit, an open-source distributed application framework for .NET, provides tools and techniques to help you navigate the complexities of distributed systems.</em></p>



<p><em>In this webinar, Chris Patterson will guide you through the complexities of messaging patterns, illustrating how MassTransit can streamline communication, enhance scalability, and boost resilience in your applications. Whether you&#8217;re a seasoned developer looking to refine your messaging skills or a newcomer eager to explore the world of distributed systems, this webinar will provide valuable insights and practical knowledge that will empower you to build more robust and efficient software solutions.</em></p>



<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">

</div></figure>



<span id="more-390140"></span>



<p><strong>Webinar agenda:</strong></p>



<ul>
<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=0s" rel="noopener" target="_blank">00:00</a> &#8211; Intro</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=77s" rel="noopener" target="_blank">01:17</a> &#8211; About OSS PowerUps</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=190s" rel="noopener" target="_blank">03:10</a> &#8211; Hello, Chris!</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=385s" rel="noopener" target="_blank">06:25</a> &#8211; About Chris and MassTransit</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=480s" rel="noopener" target="_blank">08:00</a> &#8211; When to use MassTransit</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=702s" rel="noopener" target="_blank">11:42</a> &#8211; MassTransit in Action: “DropBox” Pattern</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=920s" rel="noopener" target="_blank">15:20</a> &#8211; Publishing a Message</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=949s" rel="noopener" target="_blank">15:49</a> &#8211; Watching Messages in RabbitMQ</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=1026s" rel="noopener" target="_blank">17:06</a> &#8211; Consuming Messages</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=1160s" rel="noopener" target="_blank">19:20</a> &#8211; Configuring MassTransit</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=1285s" rel="noopener" target="_blank">21:25</a> &#8211; Message Idempotency and Deduplication</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=1490s" rel="noopener" target="_blank">24:50</a> &#8211; Q: Who generates IDs?</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=1625s" rel="noopener" target="_blank">27:05</a> &#8211; Advantages of MassTransit over bare Message Queues</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=1839s" rel="noopener" target="_blank">30:39</a> &#8211; Q: Can communicate synchronously between MassTransit and RabbitMQ?</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=1985s" rel="noopener" target="_blank">33:05</a> &#8211; Retry Patterns and Failure Handling</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=2310s" rel="noopener" target="_blank">38:30</a> &#8211; Logging in MassTransit</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=2362s" rel="noopener" target="_blank">39:22</a> &#8211; Request/Response vs. Publish</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=2494s" rel="noopener" target="_blank">41:34</a> &#8211; Telemetry in MassTransit</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=2594s" rel="noopener" target="_blank">43:14</a> &#8211; Configuring Retries I</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=2734s" rel="noopener" target="_blank">45:34</a> &#8211; Q: Where are failing Messages going?</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=2829s" rel="noopener" target="_blank">47:09</a> &#8211; Configuring Retries II</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=2940s" rel="noopener" target="_blank">49:00</a> &#8211; Does MassTransit retry on RabbitMQ?</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=3088s" rel="noopener" target="_blank">51:28</a> &#8211; How to unlearn the Request/Response approach?</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=3304s" rel="noopener" target="_blank">55:04</a> &#8211; Evolving API Contracts in Responses (Avoiding Monoliths)</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=3638s" rel="noopener" target="_blank">1:00:38</a> &#8211; Q: How does MassTransit compare to EasyNetQ and NServiceBus?</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=3755s" rel="noopener" target="_blank">1:02:35</a> &#8211; Q: How to version Events?</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=4035s" rel="noopener" target="_blank">1:07:15</a> &#8211; Q: Can I control the Message Serialization to the Queue?</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=4060s" rel="noopener" target="_blank">1:07:40</a> &#8211; Q: Are Sagas always correlated by a GUID?</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=4114s" rel="noopener" target="_blank">1:08:34</a> &#8211; Q: Are there Tutorials on Sagas?</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=4228s" rel="noopener" target="_blank">1:10:28</a> &#8211; Q: Is that a Choreographer instead of an Orchestrator?</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=4310s" rel="noopener" target="_blank">1:11:50</a> &#8211; Q: Can a Content-Type be used for Versioning?</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=4376s" rel="noopener" target="_blank">1:12:56</a> &#8211; Q: What is GreenPipes?</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=4560s" rel="noopener" target="_blank">1:16:00</a> &#8211; Q: How are Riders different from Transports?</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=4710s" rel="noopener" target="_blank">1:18:30</a> &#8211; Q: Where can I see good examples of MassTransit’s State Machine?</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=4788s" rel="noopener" target="_blank">1:19:48</a> &#8211; Q: Can you explain Lifts in the old State-Machine Implementation?</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=4826s" rel="noopener" target="_blank">1:20:26</a> &#8211; Q: Is it worth using Real Broker Services for Integration Tests?</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=4998s" rel="noopener" target="_blank">1:23:18</a> &#8211; Q: How to share Contracts between Projects?</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=5127s" rel="noopener" target="_blank">1:25:27</a> &#8211; Q: Can you perform Request Validation?</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=5160s" rel="noopener" target="_blank">1:26:00</a> &#8211; Q: Are Sagas conceptually compatible with Azure Service Bus Sessions?</li>



<li><a href="https://youtube.com/watch?v=sbt9p7jqe74&amp;t=5234s" rel="noopener" target="_blank">1:27:14</a> &#8211; Outro</li>
</ul>



<p><strong>Resources:</strong></p>



<ul>
<li><a href="https://masstransit.io/" rel="noopener" target="_blank">MassTransit Website</a></li>



<li><a href="https://github.com/MassTransit/MassTransit" rel="noopener" target="_blank">MassTransit GitHub Repository</a></li>



<li><a href="https://github.com/sponsors/phatboyg" rel="noreferrer noopener nofollow" target="_blank">Sponsor Chris</a></li>



<li><a href="https://github.com/phatboyg/Demo-PowerUps" rel="noopener" target="_blank">Demo Project</a></li>
</ul>



<p><strong>About the presenter:</strong></p>


    <div class="about-author ">
        <div class="about-author__box">
            <div class="row">
                                                            <div class="about-author__box-img">
                            <img alt="" src="https://blog.jetbrains.com/wp-content/uploads/2023/09/Patterson-Chris-2874-copy.jpg" />
                        </div>
                                        <div class="about-author__box-text">
                                                    <h4>Chris Patterson</h4>
                                                <p>Chris Patterson is an Enterprise Software Architect, the founder of Loosely Coupled, LLC, and the author of MassTransit, an open-source distributed application framework for building message-based applications. Before starting his own company, Chris spent 24 years leading the architecture and development of multiple platforms and services in a Fortune 10 company leveraging a broad range of technologies. Chris is a multi-year Microsoft MVP award recipient and regularly produces software development-related content on <a href="https://www.youtube.com/channel/UCjC-E0zi1ZokFmshlcq691Q" rel="noopener" target="_blank">YouTube</a>.</p>
<p>Follow Chris on <a href="https://twitter.com/PhatBoyG" rel="noopener" target="_blank">Twitter</a> and <a href="https://www.linkedin.com/in/chrispatterson/" rel="noopener" target="_blank">LinkedIn</a>.</p>
                    </div>
                            </div>
        </div>
    </div></p>
            </div>
        ]]></content:encoded>
            <pubDate>Wed, 08 Nov 2023 10:11:38 +0000</pubDate>
        </item>
        
        <item>
            <title>Welcome Fleet with Kotlin Multiplatform Tooling</title>
            <link>https://blog.jetbrains.com/kotlin/2023/11/kotlin-multiplatform-tooling-in-fleet/</link>
            <guid isPermaLink="true">https://blog.jetbrains.com/kotlin/2023/11/kotlin-multiplatform-tooling-in-fleet/</guid>
            <description><![CDATA[None]]></description>
            <content:encoded><![CDATA[
            <div style="font-family: Arial, sans-serif;">
                
                
                <p><p><a href="https://www.jetbrains.com/kotlin-multiplatform/" rel="noreferrer noopener" target="_blank">Kotlin Multiplatform</a> (KMP) is an open-source technology built by JetBrains that allows you to share code across multiple platforms while retaining the benefits of native programming. Supported platforms include iOS, Android, desktop, web, and others.</p>



<p>Today, we&#8217;re launching a preview for Kotlin Multiplatform support in <a href="https://www.jetbrains.com/fleet/" rel="noreferrer noopener" target="_blank">Fleet</a>, which simplifies the development of multiplatform applications, adding to the already <a href="https://blog.jetbrains.com/kotlin/2023/10/kotlin-support-in-jetbrains-fleet/" rel="noreferrer noopener" target="_blank">extensive Kotlin</a> support in Fleet. Please note that if you’re targeting iOS and macOS, you will need Xcode.</p>



<p align="center"><a class="ek-link jb-download-button" href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/fleet.html?utm_source=kotlinblog&#038;utm_medium=cta&#038;utm_campaign=kmp-in-fleet" rel="noopener" target="_blank" title="Get Started">Get Started</a></p>



<p>Let’s take a look at some of the features.</p>



<h3 class="wp-block-heading">Simplicity</h3>



<p>When you open a multiplatform project, Fleet will automatically create Run Configurations for the Android and/or iOS platforms, as declared in the project build file. You can use these to execute your application on an Android Virtual Device or the iOS Simulator.</p>



<figure class="wp-block-image size-full"><img alt="Kotlin Multiplatform Tooling in Fleet: Auto-generated Run Configurations for Android and/or iOS" class="wp-image-403391" height="519" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/RunConfigurations-1.png" width="1344" /></figure>



<h3 class="wp-block-heading">Polyglot Programming</h3>



<p>Because Fleet is a polyglot IDE, you don&#8217;t have to switch to a different editor or compromise usability when working with the native code in your multiplatform project. When editing Swift code, you have the same rich functionality you would expect in Kotlin and Java, as well as full support for Xcode projects.</p>



<figure class="wp-block-image size-full"><img alt="Kotlin Multiplatform Tooling in Fleet: Polyglot programming" class="wp-image-403402" height="850" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/PloyglotProgramming-1.png" width="1666" /></figure>



<h3 class="wp-block-heading">Code navigation</h3>



<p>Fleet supports cross-language navigation between Swift and Kotlin. For example, when you use the <strong>Show Usages</strong> action on a Kotlin function, any invocations from Swift code will feature in the results. If there is a single match, then the associated file is displayed.</p>



<img alt="Swift-Kotlin cross-language navigation" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/CrossLanguageNavigation.png" />



<h3 class="wp-block-heading">Refactoring</h3>



<p>Refactoring in Fleet is also cross-language. In the example below, if we use <strong>Rename Refactoring</strong> on the MainViewController type, then the refactoring will apply across both Kotlin and Swift modules.</p>



<img alt="Swift-Kotlin cross-language refactoring" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/CrossLanguageRefactoringLooping.png" />



<h3 class="wp-block-heading">Debugging</h3>



<p>Debugging in Fleet is also cross-language. You can set a breakpoint in Swift code, view values and the call stack in that environment, step into a Kotlin call, and then continue as required.</p>



<img alt="Swift-Kotlin cross-language refactoring" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/FleetDebuggingCut.png" />



<h2 class="wp-block-heading">A single IDE</h2>



<p>As you may be aware or have experienced, creating Kotlin Multiplatform applications has oftentimes involved needing to use multiple IDEs in combination. This is still the case when targeting mobile, as Android Studio and Xcode are required. However, our goal with Fleet is to provide a single IDE where you can develop applications without needing to switch tools (Xcode will still be required to be installed when targeting Apple devices, but will not be necessary for daily work).</p>



<h2 class="wp-block-heading">Pricing model</h2>



<p>During the Preview period, Fleet, including the Kotlin Multiplatform Tooling, will remain free. Once we release the tooling, we anticipate the pricing model will be in line with that of Fleet itself. We’ll provide more information closer to the release date.</p>



<h2 class="wp-block-heading">Our commitment to IntelliJ IDEA and the IntelliJ Platform</h2>



<p>Fleet uses the IntelliJ code-processing engine for Swift and all of our Kotlin support, and consequently, we will continue to provide support for Kotlin in IntelliJ IDEA and on the IntelliJ Platform (thus also Android Studio). In addition, we have an ever-increasing base of developers using Kotlin in IntelliJ IDEA, and we want to assure you that innovation and support will continue on this platform.</p>



<p>Having said that, the target audience for IntelliJ IDEA will primarily remain that of server-side developers targeting the JVM. While it will be possible to open, navigate, and build Kotlin Multiplatform projects in IntelliJ IDEA and Android Studio, other features such as platform-specific run configurations, Compose Multiplatform features, and many other things that facilitate multiplatform development will be supported in Fleet only.</p>



<h2 class="wp-block-heading">How to get started</h2>



<p>To get started with Kotlin Multiplatform development and try out all of the cool features we have been working on, you can install the latest version of Fleet via <a href="https://www.jetbrains.com/fleet/download/" rel="noreferrer noopener" target="_blank">the JetBrains Toolbox App</a>. We also have a brand new <a href="https://kmp.jetbrains.com/" rel="noreferrer noopener" target="_blank">online Web Wizard</a> for creating Kotlin Multiplatform projects.</p>



<p>Make sure you check out the <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/fleet.html?utm_source=kotlinblog&amp;utm_medium=cta&amp;utm_campaign=kmp-in-fleet" rel="noreferrer noopener" target="_blank">Fleet for Kotlin Multiplatform Development</a> tutorial for a step-by-step guide on creating your first application. You can also take a look at some of the <a href="https://kotlinlang.org/docs/multiplatform-mobile-samples.html" rel="noreferrer noopener" target="_blank">KMP sample applications</a>&nbsp; we’ve prepared.</p>



<p align="center"><a class="ek-link jb-download-button" href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/fleet.html?utm_source=kotlinblog&#038;utm_medium=cta&#038;utm_campaign=kmp-in-fleet" rel="noopener" target="_blank" title="Get Started">Get Started</a></p>



<h2 class="wp-block-heading">We need your feedback</h2>



<p>It’s still very early days for Kotlin Multiplatform Tooling in Fleet, and we would love to hear your feedback. Let us know what works, what doesn’t, what is missing, and what you just can’t do without. Leave us a comment on this blog post or use our <a href="https://youtrack.jetbrains.com/issues/FL?u=1:" rel="noreferrer noopener" target="_blank">issue tracker</a>. You can also share any feedback you have on Kotlin Multiplatform, including the tooling, on the <a href="https://slack-chats.kotlinlang.org/c/fleet" rel="noreferrer noopener" target="_blank">#fleet</a> channel on the Kotlin Slack.</p>



<p>Thank you!</p></p>
            </div>
        ]]></content:encoded>
            <pubDate>Tue, 07 Nov 2023 14:24:34 +0000</pubDate>
        </item>
        
        <item>
            <title>How JetBrains Rider Implemented .NET WebAssembly Debugging</title>
            <link>https://blog.jetbrains.com/dotnet/2023/11/07/how-jetbrains-rider-implemented-net-webassembly-debugging/</link>
            <guid isPermaLink="true">https://blog.jetbrains.com/dotnet/2023/11/07/how-jetbrains-rider-implemented-net-webassembly-debugging/</guid>
            <description><![CDATA[None]]></description>
            <content:encoded><![CDATA[
            <div style="font-family: Arial, sans-serif;">
                
                
                <p><p><a href="https://dotnet.microsoft.com/en-us/apps/aspnet/web-apps/blazor" rel="noopener" target="_blank">Blazor</a> is part of a .NET technology that lets you build full-stack web applications using C# without the need to write JavaScript code. There’s server-side Blazor, client-side Blazor (which uses WebAssembly (WASM) to run in the browser and interact with the DOM), and <a href="https://learn.microsoft.com/en-us/aspnet/core/blazor/hosting-models?view=aspnetcore-8.0" rel="noopener" target="_blank">other hosting models</a>.</p>



<p>Our .NET IDE, <a href="https://www.jetbrains.com/rider/" rel="noopener" target="_blank">JetBrains Rider</a>, helps you develop Blazor applications. You can write code and use the debugger to run and troubleshoot the apps you are developing. While the process of implementing a debugger is more or less the same for Blazor Server as it is for any other .NET application, the debugger implementation for Blazor WASM is quite different.</p>



<p>In this blog post, we’ll look at some of the finer engineering points of how we implemented the IDE frontend for debugging both Blazor WASM and all variations of .NET apps targeting WebAssembly!</p>



<h2 class="wp-block-heading">The .NET WebAssembly family</h2>



<p>Before Blazor, there were several other well-known and more obscure frameworks, both from Microsoft and third-party authors, that allowed users to run .NET in the browser. For example, there is <a href="https://opensilver.net/" rel="noopener" target="_blank">OpenSilver</a>, an open-source implementation of the now deprecated Silverlight. For a while, there was also a Bridge.NET framework.</p>



<p>With Blazor, Microsoft released the first first-party framework for .NET in the browser using WebAssembly technology. Blazor WebAssembly can be used to develop Single-Page Applications (SPAs). These can be hosted by the DevServer that is part of the .NET SDK, or as part of an ASP.NET Core backend running server-side APIs to build full-stack applications with .NET.</p>



<p>When .NET 7 was released, two new options appeared as part of the new SDK’s <code>wasm-experimental</code> workload: the <code>browser-wasm</code> and <code>console-wasm</code> runtime identifiers (RID). These let you target WASM in the browser with Blazor, and NodeJS in the terminal for other .NET application types.</p>



<p>Based <a href="https://github.com/SteveSandersonMS/dotnet-wasi-sdk" rel="noopener" target="_blank">on the <code>Wasi.Sdk</code> prototype</a> created by Steve Sanderson, .NET 8 will include another workload that targets the WebAssembly System Interface (WASI), which will make it possible to run .NET code through WebAssembly outside of the browser while maintaining access to the file system, network, system calls, and more.</p>



<p><em>Tip: Our developer advocate Khalid Abuhakmeh covered a number of these options in t</em><a href="https://blog.jetbrains.com/dotnet/2022/12/15/the-future-of-net-with-wasm/"><em>he Future of .NET with WASM</em></a><em>.</em></p>



<p>Typically, these approaches use the Mono Ahead of Time (AOT) compiler to generate WebAssembly binaries. There’s an <a href="https://github.com/dotnet/runtimelab/tree/feature/NativeAOT-LLVM" rel="noopener" target="_blank">experimental NativeAOT-LLVM project</a> by the .NET team that uses the Emscripten toolchain, but it is currently not ready for use in real projects.</p>



<h2 class="wp-block-heading">Anatomy of a .NET WebAssembly application</h2>



<p>Let’s look at how .NET applications targeting WebAssembly are composed. We’ll start with Blazor WASM and then dig into the <code>wasm-experimental</code> workload.&nbsp;</p>



<h3 class="wp-block-heading">Blazor WASM</h3>



<p>When creating a Blazor WASM application, you will find an <code>index.html</code> file which, like in most other SPA frameworks, contains a <code>div</code> element in which the framework will create and render your application. There will also be a <code>script</code> element that loads the Blazor WebAssembly framework:</p>



<pre class="EnlighterJSRAW">&lt;!DOCTYPE html>
&lt;!-- ... -->
&lt;body>
  &lt;div id="app">
    // ...
  &lt;/div>
  // ...
  &lt;script src="_framework/blazor.webassembly.js">&lt;/script>
&lt;/body>
&lt;/html></pre>



<p>After building this project, you will see that several files are created:</p>



<ul>
<li><code>BlazorApp1.dll</code> and <code>BlazorApp1.pdb</code> – A compiled version of your application.</li>



<li><code>blazor.boot.json</code> – Contains information about the entry assembly (<code>BlazorApp1</code>) and information about the runtime, dependencies, and so on.</li>



<li><code>dotnet.wasm</code>  – A version of the .NET runtime (Mono, to be more precise) compiled into a WebAssembly module.</li>



<li><code>mscorlib.dll</code> – The .NET framework core libraries, compiled into Common Intermediate Language (CIL).</li>



<li><code>blazor.webassembly.js</code> – A file that glues all of the above together.</li>
</ul>



<p>If you run this application using the <code>dotnet run</code> command, for example, you’ll see a <code>dotnet</code> process begins. This then starts (by default) the DevServer and hosts your application, which you can work with through the browser:</p>



<pre class="EnlighterJSRAW">dotnet run
└── dotnet: "~\.nuget\packages\microsoft.aspnetcore.components.webassembly.devserver\7.0.5/tools/blazor-devserver.dll" --applicationpath "...\BlazorApp1\bin\Debug\net7.0\BlazorApp1.dll"</pre>



<p>Now let’s see how the <code>wasm-experimental</code> workload handles this.</p>



<h3 class="wp-block-heading">wasm-experimental</h3>



<p>To try out the <code>wasm-experimental</code> workload, you’ll first need to install it:</p>



<pre class="EnlighterJSRAW">dotnet workload install wasm-tools wasm-experimental</pre>



<p>Once done, you can create a new .NET application using the <code>wasmbrowser</code> template:</p>



<pre class="EnlighterJSRAW">dotnet new wasmbrowser --name WasmApp1</pre>



<p>Like with Blazor WASM, an <code>index.html</code> file is created with a <code>span</code> element used for rendering. The HTML file also loads the&nbsp;<code>main.js</code> file as a script, not a Blazor framework-related script like in the previous example.</p>



<pre class="EnlighterJSRAW">&lt;!DOCTYPE html>
&lt;html>
&lt;head>
  &lt;!-- ... -->
  &lt;script type='module' src="./main.js">&lt;/script>
&lt;/head>
&lt;body>
  &lt;span id="out">&lt;/span>
&lt;/body>
&lt;/html></pre>



<p>The <code>main.js</code> that is loaded is very different from the Blazor approach, where there’s little control over how the application is launched. In the <code>main.js</code>, we can see that .NET is imported, some other code is executed, and finally, <code>dotnet.run()</code> is invoked to start the application.</p>



<pre class="EnlighterJSRAW">import { dotnet } from './dotnet.js'

// ...

await dotnet.run();</pre>



<p>The <code>...</code> in the above code snippet is important. During startup, you can change the .NET (well, Mono) runtime configuration, such as network download policy settings and more. When using WebGL, for example, you can specify the canvas for rendering. You could also change the logging level, which may be useful for seeing what’s going on when you are porting your application to .NET WebAssembly.</p>



<p>After building this project, you’ll find that several files are created:</p>



<ul>
<li><code>mono-config.json</code> – Metadata generated from your project, specifying the main assembly name, assembly folder, debug level, sources, asset hashes, and more.</li>



<li><code>managed/</code> (folder) – Your application’s managed assemblies.</li>



<li><code>dotnet.js</code> and <code>dotnet.js.symbols</code> – JavaScript-based APIs to configure and manipulate the Mono runtime together with debug symbols.</li>



<li><code>dotnet.wasm</code> – A version of the .NET runtime (Mono, to be more precise) compiled into a WebAssembly binary.</li>



<li><code>index.html</code> and <code>main.js</code> – The files we saw earlier, bootstrapping your application.</li>



<li><code>WasmApp1.runtimeconfig.json</code> – A runtime configuration file, which is required since <code>wasm-experimental</code> projects add a new runtime identifier.</li>
</ul>



<p>The <code>WasmApp1.runtimeconfig.json</code> contains metadata for the runtime to help determine how the application should be run. It specifies the main assembly, runtime arguments if needed, and an <code>index.html</code> file that will be run in the browser.</p>



<pre class="EnlighterJSRAW">{
  "runtimeOptions": {
    "tfm": "net8.0",
    "wasmHostProperties": {
      "perHostConfig": [
        {
          "name": "browser",
          "html-path": "index.html",
          "Host": "browser"
        }
      ],
      "runtimeArgs": [],
      "mainAssembly": "WasmApp1.dll"
    },
  }
}</pre>



<p>To run the application, you can invoke <code>dotnet run</code> again. In the process tree, you’ll notice <code>WasmAppHost</code> as the application (and not the DevServer from earlier):</p>



<pre class="EnlighterJSRAW">dotnet: run
└── dotnet: exec "C:\Program Files\dotnet\packs\Microsoft.NET.Runtime.WebAssembly.Sdk\8.0.0-preview.4.23259.5\WasmAppHost\WasmAppHost.dll" --runtime-config "D:\Playground\WasmApp1\WasmApp1\bin\Debug\net8.0\browser-wasm\AppBundle\WasmApp1.runtimeconfig.json"</pre>



<h3 class="wp-block-heading">In summary</h3>



<p>Whether you use Blazor WASM or the <code>wasm-experimental</code> workload, almost any .NET WebAssembly application runs with the Mono runtime. It’s important to note, however, that even though you specified a compatible version of the language and the target framework, some C# functionality that you compile will not be understood by the runtime. A good example is generic types in attributes, introduced in C# 11. You can use such an attribute in your code, but at the time of writing this post, it is not supported by the Mono runtime and fails to execute.</p>



<p><em>Note: Generic attributes in Mono </em><a href="https://github.com/dotnet/runtime/issues/77047" rel="noopener" target="_blank"><em>will work starting from .NET 8</em></a><em>.</em></p>



<p>In addition to the Mono runtime, we saw that your application will be hosted with the DevServer, the WasmAppHost, or on ASP.NET Core. You will find an <code>index.html</code> file that is opened in the browser, as well as some JavaScript glue code.</p>



<p>Now, how does the debugger in Rider communicate with the runtime? And how does the runtime itself communicate with the browser (and vice versa)? Let’s find out!</p>



<h2 class="wp-block-heading">Debugging a .NET desktop application</h2>



<p>Before we dive into debugging .NET WebAssembly applications, let’s take a quick detour and talk about debugging a .NET desktop application. There are three actors involved in this process – a runtime (which runs your application&#8217;s code), the debugger client (Rider), and your application. When the runtime starts, it waits for the debugger to connect to it, and then continues executing the code.</p>



<figure class="wp-block-image size-full"><img alt="" class="wp-image-399748" height="192" src="https://blog.jetbrains.com/wp-content/uploads/2023/10/image-31.png" width="1240" /></figure>



<p>When debugging locally, with both the debugger and your application on the same machine, the debugger client is almost always in the same environment as the runtime, so the lifetimes of both actors are closely related. When you close your application, the debugger knows it can stop running.</p>



<p>For .NET WebAssembly applications, the debugger&#8217;s and debuggee&#8217;s lifetime (your application) becomes more… interesting.</p>



<p>First of all, there’s a Chromium-based browser involved. The browser hosts the <code>index.html</code> page as a tab. This browser tab hosts a regular WebAssembly runtime that can execute special <code>.wasm</code> code. Meanwhile, the WASM runtime starts the Mono runtime, which can decode and execute .NET’s Common Intermediate Language (CIL) in the form of an assembly.&nbsp;</p>



<p>As part of this runtime, your application code is executed – the part that we’re interested in debugging. A rather complex onion-like architecture emerges, through which the debugger needs to be able to monitor the code execution process and receive events in the reverse direction, for example, when a breakpoint is hit.</p>



<figure class="wp-block-image size-full"><img alt="" class="wp-image-399759" height="585" src="https://blog.jetbrains.com/wp-content/uploads/2023/10/image-32.png" width="1333" /></figure>



<p>After this short interruption, let’s look at how JetBrains Rider works with all of these!</p>



<h2 class="wp-block-heading">The debug proxy</h2>



<p>Luckily for us, there’s an existing mechanism for working with an architecture like we just described: the Mono Debug Proxy!</p>



<p>If you go back to the Blazor WASM process tree when running your application, you’ll see that it looks a bit different when you’re running the debugger through Rider. A new child process is started:</p>



<pre class="EnlighterJSRAW">Rider.Backend.exe: …
└── winpty-agent.exe: …
    └── dotnet:
~/.nuget/packages/microsoft.aspnetcore.components.webassembly.devserver/7.0.5/tools/blazor-devserver.dll --applicationpath bin\Debug\net7.0\BlazorApp1.dll
        └── dotnet: exec
"~\.nuget\packages\microsoft.aspnetcore.components.webassembly.devserver\7.0.5\tools\BlazorDebugProxy\BrowserDebugHost.dll" --OwnerPid 16152 --DevToolsUrl http://127.0.0.1:64069</pre>



<p>The last process in this tree launches the <code>BrowserDebugHost.dll</code>, which receives its parent process ID and a value for the <code>DevToolsUrl</code> argument. This URL is one of the key elements for making the debugger proxy work. Let’s add it to our diagram:</p>



<figure class="wp-block-image size-full"><img alt="" class="wp-image-399770" height="579" src="https://blog.jetbrains.com/wp-content/uploads/2023/10/image-33.png" width="1165" /></figure>



<p>When the Debug Proxy starts, it uses the Chrom(ium) developer tools URL to retrieve the information it needs in order to work with the browser tab. This includes, for example, how to send and receive events from the browser and how to work with the Mono runtime that hosts your application. The Debug Proxy does a lot of heavy lifting for the debugger client, in our case JetBrains Rider, because now it only needs to work with one entity.</p>



<p>In other words, the debugger client (JetBrains Rider) does not work directly with the browser tab. Instead, it connects to the Debug Proxy, which serves as a communication layer between the browser, the debugger client, and the runtime.</p>



<p>As a debugger client, JetBrains Rider can now send and receive calls and events from the browser, for example downloading assets, navigating in the address bar, and so on. The Debug Proxy also listens for JavaScript events from Mono and can work with it through the .NET JavaScript API found in the <code>dotnet.js</code> file. Unfortunately, this API is currently undocumented, and changes quite often.</p>



<p>Time for some reverse engineering!</p>



<h2 class="wp-block-heading">Connecting all the components: Rider, Debug Proxy, and the browser</h2>



<p>To communicate with the Mono runtime running in the browser, JetBrains Rider, the Debug Proxy, and the browser need to communicate with each other. This communication starts with a handshake, ensuring all components know where the other components can be reached.</p>



<p>The handshake that establishes communication between all the components is the most complex and unstable process in the entire mechanism. Let’s start with a diagram so that you can follow along.</p>



<figure class="wp-block-image size-full"><img alt="" class="wp-image-399781" height="720" src="https://blog.jetbrains.com/wp-content/uploads/2023/10/image-34.png" width="670" /></figure>



<p>When you start debugging a .NET WebAssembly application, for example <code>WasmApp1</code>, the debugger will launch the <code>WasmApp1</code> process using the DevServer or ASP.NET Core, depending on the hosting option. The Debug Proxy is also launched as a child process, thanks to the <a href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.webassemblynetdebugproxyappbuilderextensions.usewebassemblydebugging" rel="noopener" target="_blank">WebAssembly debugging middleware</a> that is registered automatically as part of your application.</p>



<p>Next, a Chromium browser such as Google Chrome or Microsoft Edge is launched and instructed to open a special placeholder URL like <code>about:blank?realUrl=...</code>. The browser then writes its debugging port and path to a file in your user profile directory.</p>



<p>The debugger then constructs the debugger endpoint websocket URL based on the port and path from this file. It will then look like this: <code>ws://127.0.0.1:{port}/{path}</code>. In the next step, the debugger sends an HTTP <code>GET</code> request to a special endpoint – <code>GET http://localhost:5170/_framework/debug/ws-proxy?browser=ws://127.0.0.1:{port}/{path}</code> – which, as you can see, contains the generated websocket URL. The WebAssembly debugging middleware we discussed earlier passes this on to the Debug Proxy.</p>



<p>After that, the Debug proxy comes into play and initializes a WebSocket connection to the browser using the URL it received. Once connected, it opens a new proxy debugging endpoint and returns the URL to this endpoint with a <code>302 Redirect</code> response.</p>



<p>Once JetBrains Rider receives the endpoint URL, which the Debug Proxy then returns, it creates a connection to it. And then, the real work begins!</p>



<p>When connected to the Debug Proxy, JetBrains Rider sends information about all breakpoints that were added by the user in the IDE’s editor. Remember, the browser is still open on a special empty page, so your application is not yet running. The Debug Proxy will keep track of these requests to create breakpoints and will apply them when the Mono runtime is ready to receive them. This approach ensures that a breakpoint on the first line of your <code>Main</code> method can be triggered, which might otherwise not be possible because, at this point, the runtime is already executing your application.</p>



<p>After the Debug Proxy knows about these breakpoints, JetBrains Rider triggers browser navigation to the actual application – yours! This starts the Mono runtime and makes sure your application is executed.</p>



<p>As a final step, the Debug Proxy finishes all activities related to activation of the runtime, loads the required assemblies, and sends a signal to JetBrains Rider that it’s ready for action!</p>



<h2 class="wp-block-heading">The Chrome DevTools Protocol (CDP)</h2>



<p>Browsers using the Chromium engine all implement the so-called <a href="https://chromedevtools.github.io/devtools-protocol/" rel="noopener" target="_blank">Chrome DevTools Protocol (CDP)</a>. If you’ve worked with <a href="https://www.selenium.dev/" rel="noopener" target="_blank">Selenium</a> or other frontend test automation tools, you may have used it yourself. Through the CDP interface, you can do almost anything with the browser and pages – as long as you stay within the limits of the user&#8217;s security settings.</p>



<p>The CDP is well documented and versioned. Structurally, it consists of what are called <em>domains</em>, or <em>modules</em>, which in turn consist of <em>types</em>. Think of them like a structure or record that can transfer specific data. Some <em>methods</em> allow the debugger client to make calls into the Chromium instance, and <em>events</em>, where the debugger client can subscribe to calls from the browser into the debugger. The Debug Proxy can be considered a &#8220;virtual&#8221; Chromium browser, because it also communicates using the CDP.</p>



<p><em>Note: If you want to explore the CDP protocol in detail, check out the </em><a href="https://chromedevtools.github.io/devtools-protocol/" rel="noopener" target="_blank"><em>official CDP documentation</em></a><em> or </em><a href="https://vanilla.aslushnikov.com/" rel="noopener" target="_blank"><em>a simplified version</em></a><em>. Since we had to reverse-engineer the <code>DotnetDebugger</code>, <code>Mono</code>, and <code>Runtime</code> domains of the CDP, we are hosting </em><a href="https://mono-cdp.seclerp.me/" rel="noopener" target="_blank"><em>the CDP documentation</em></a><em> for anyone who is interested in writing their own .NET WebAssembly debugger.</em></p>



<p>At the transport level, websockets are being used. The messages that flow over this socket are a variation on <a href="https://www.jsonrpc.org/specification" rel="noopener" target="_blank">JSON-RPC 2.0</a>, which is a format describing remote calls using JSON payloads. This format is also used in the <a href="https://langserver.org/" rel="noopener" target="_blank">Language Server Protocol</a>.&nbsp;</p>



<p>There are three types of messages: requests, responses and events. Request and response messages from and to the debugger client (JetBrains Rider) are ordered by <code>id</code>, whereas events can be triggered at any point in time without strict ordering. Here are some example messages:</p>



<pre class="EnlighterJSRAW">// request
{"id":10, "method": "Page.navigate", "params":{"url":"http://localhost:5170/"}}

// response
{"id":10, “result”: {"frameId":"…","loaderId":"…"}}

// event
{"method": "Network.requestServedFromCache", "params":{"requestId":"98279.21"}}</pre>



<p>With CDP, it’s also possible to create <em>sessions </em>on a single connection, to control different browser tabs while re-using the websocket connection.</p>



<p><em>Targets </em>are another supported concept. The debugger can attach to the browser and a page, but also to service workers, background pages, and so on.</p>



<h2 class="wp-block-heading">.NET WebAssembly Chrome DevTools Protocol in Rider</h2>



<p>Whew, what a title! Working with the CDP to interact with the Mono runtime running your WebAssembly application is great! However, we found that working with the protocol messages directly gets boring rather quickly. So, we built an abstraction that we can use in the JetBrains Rider code base!</p>



<p>Since several folks on our team may be interacting with the .NET WebAssembly debugger, we wanted to create a simple API that doesn&#8217;t require our entire development team to know about all of the details of the CDP protocol and other machinery we covered in this post.. Here’s an example code snippet of setting up the connection to the browser’s websocket URL, which abstracts much of the handshake we saw earlier in this post.</p>



<pre class="EnlighterJSRAW">// Creating connection
var connection = new DefaultProtocolClient(new Uri("ws://localhost:5151"), logger);
await connection.ConnectAsync(cancellationToken);

// Sending commands
var response = await connection.SendCommandAsync(
    Domains.DotnetDebugger.SetDebuggerProperty(
        JustMyCodeStepping: true
    )
);

// Firing commands (when we're not interested in response)
await connection.FireCommandAsync(Domains.Debugger.StepOut());</pre>



<p>The commands sent with this API correspond to methods in CDP terminology. We can send them and wait for a response or make a fire-and-forget call. The commands (methods), events, and types are generated from the JSON specification of the CDP.</p>



<p>In addition to sending messages, it is also possible to listen for events and create new sessions (called “scopes” in the API). We try to avoid using the exact CDP terminology because we will also extend this API to the Firefox Debugger Protocol in the future.</p>



<pre class="EnlighterJSRAW">// Listening for events
pageClient.ListenEvent&lt;Domains.Debugger.BreakpointResolved>(async e =>
{
    ResolveBreakpoint(e.BreakpointId.Value);
});


// Creating scoped clients (clients for specific sessions)
var scopedClient = connection.CreateScoped(sessionId);</pre>



<p>Since methods must be ordered in the CDP, they are not sent directly. Instead, they are added to a queue. In a long-running task, they are sent with an incremental message ID. When sending, a <code>TaskCompletionSource</code> is created for the same message id, so that we can <code>await</code> the response to this message.</p>



<pre class="EnlighterJSRAW">private readonly BlockingCollection&lt;ProtocolRequest&lt;ICommand>> _outgoingMessages = …

public async Task&lt;TResponse> SendCommandAsync&lt;TResponse>(ICommand&lt;TResponse> command,
  string? sessionId = null,
  CancellationToken? token = default) where TResponse : IType
{
  var id = Interlocked.Increment(ref _currentId);
  var resolver = new TaskCompletionSource&lt;JObject>();
  if (_responseResolvers.TryAdd(id, resolver))
  {
    await FireInternalAsync(id, GetMethodName(command.GetType()), command, sessionId);
    var responseRaw = await resolver.Task;
    var response = responseRaw.ToObject...
    return response;
  }
  throw new Exception("Unable to enqueue message to send");
}

private async Task FireInternalAsync(int id, string methodName, ICommand command, string? sessionId)
{
  var request = new ProtocolRequest&lt;ICommand>(id, methodName, command, sessionId);
  if (!_outgoingMessages.TryAdd(request)) throw new Exception("Can't schedule outgoing message for sending.");
}</pre>



<p>A separate long-running task also listens for incoming messages from the browser. These can be both events and responses to a message that was sent earlier. For events, the appropriate delegate is invoked. In the case of responses to messages, we retrieve the corresponding <code>TaskCompletionSource</code> created when sending the message, and depending on whether it is a result of an error, we set the <code>TaskCompletionSource</code> status.</p>



<p>When setting breakpoints in the CDP, we do so based on the file name. The runtime loads different assemblies and source maps from debug symbols one by one, and as soon as it finds a candidate that matches the file name pattern, a <code>BreakpointResolved</code> event is fired. JetBrains Rider has to respond to it as quickly as possible to make sure you don’t see a grayed-out breakpoint in the editor.</p>



<p>A queue is also used to send the commands to create or remove breakpoints, due to the specifics of Rider’s debugger infrastructure.</p>



<h2 class="wp-block-heading">Hot reload with .NET WebAssembly</h2>



<p>With hot reload, you can make changes to code while debugging and apply those changes to your application without restarting it. While JetBrains Rider supports hot reload for many application types, it does not (yet!) support hot reload for .NET WebAssembly.</p>



<p>The way hot reload would work with .NET WebAssembly is by making use of the Edit-and-Continue (EnC) functionality in the runtime.</p>



<p><em>Note: If you want to learn more, check out this post about </em><a href="https://blog.jetbrains.com/dotnet/2021/12/02/how-rider-hot-reload-works-under-the-hood/"><em>how .NET hot reload works in Rider</em></a><em>.</em></p>



<p>The Debug Proxy has added support for EnC in .NET 7. With that now available, consider this short section as a confirmation that we are indeed working on it!</p>



<h2 class="wp-block-heading">Conclusion</h2>



<p>Although we did not have time to go over all debugger-related topics such as evaluating expressions, watches, and working with call stacks, we do hope this blog post gave you a solid rundown of how the .NET WebAssembly debugger works in JetBrains Rider!</p>



<p>Want to join our JetBrains Rider or ReSharper team and help us build the best .NET developer tools on the market? <a href="https://www.jetbrains.com/careers/jobs/" rel="noopener" target="_blank">We’re hiring!</a></p>



<p><em>Photo by <a href="https://unsplash.com/@clayton_cardinalli?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash" rel="noopener" target="_blank">Clayton Cardinalli</a> on <a href="https://unsplash.com/photos/man-in-blue-jacket-standing-beside-brown-wooden-post-hkJNx0EDbjE?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash" rel="noopener" target="_blank">Unsplash</a></em></p></p>
            </div>
        ]]></content:encoded>
            <pubDate>Tue, 07 Nov 2023 12:38:00 +0000</pubDate>
        </item>
        
        <item>
            <title>WebStorm 2023.3 EAP Digest #3: Angular, React, and Vue Improvements and More</title>
            <link>https://blog.jetbrains.com/webstorm/2023/11/webstorm-2023-3-eap-3/</link>
            <guid isPermaLink="true">https://blog.jetbrains.com/webstorm/2023/11/webstorm-2023-3-eap-3/</guid>
            <description><![CDATA[None]]></description>
            <content:encoded><![CDATA[
            <div style="font-family: Arial, sans-serif;">
                
                
                <p><p>It’s time for our last EAP digest to walk you through the new features and improvements coming in WebStorm 2023.3! For more information, check out <a href="https://blog.jetbrains.com/webstorm/tag/webstorm-2023-3/">our previous blog posts</a>.</p>
<p>The <a href="https://www.jetbrains.com/toolbox-app/" rel="noopener" target="_blank">Toolbox App</a> is the easiest way to get the EAP builds and keep both your stable and EAP versions up to date. You can also manually download the EAP builds from our <a href="https://www.jetbrains.com/webstorm/nextversion/" rel="noopener" target="_blank">website</a>.</p>
<p align="center"><a class="jb-download-button" href="https://www.jetbrains.com/webstorm/nextversion" rel="noopener" target="_blank">DOWNLOAD WEBSTORM 2023.3 EAP</a></p>
<p><strong>Important! WebStorm EAP builds are not fully tested and might be unstable.</strong></p>
<p>Please try the latest EAP build and share your feedback with us. You can do so using <a href="https://youtrack.jetbrains.com/issues/WEB" rel="noopener" target="_blank">our issue tracker</a> or by leaving a comment on this blog post.</p>
<ul>
<li><strong>New features</strong>: <a href="https://blog.jetbrains.com/feed/?_gl=1*1djr7qf*_ga*NzI5MDg0MDQwLjE2NTEwNTIyNTM.*_ga_9J976DJZ68*MTY1MzYyMzAzMy44LjAuMTY1MzYyMzA0MS4w&amp;_ga=2.194368301.1854496100.1653547382-729084040.1651052253#angular_improvements">Angular improvements</a>, <a href="https://blog.jetbrains.com/feed/?_gl=1*1djr7qf*_ga*NzI5MDg0MDQwLjE2NTEwNTIyNTM.*_ga_9J976DJZ68*MTY1MzYyMzAzMy44LjAuMTY1MzYyMzA0MS4w&amp;_ga=2.194368301.1854496100.1653547382-729084040.1651052253#improved_support_for_dev_containers"> improved support for Dev Containers</a>, <a href="https://blog.jetbrains.com/feed/?_gl=1*1djr7qf*_ga*NzI5MDg0MDQwLjE2NTEwNTIyNTM.*_ga_9J976DJZ68*MTY1MzYyMzAzMy44LjAuMTY1MzYyMzA0MS4w&amp;_ga=2.194368301.1854496100.1653547382-729084040.1651052253#react_updates">React updates</a>, <a href="https://blog.jetbrains.com/feed/?_gl=1*1djr7qf*_ga*NzI5MDg0MDQwLjE2NTEwNTIyNTM.*_ga_9J976DJZ68*MTY1MzYyMzAzMy44LjAuMTY1MzYyMzA0MS4w&amp;_ga=2.194368301.1854496100.1653547382-729084040.1651052253#improvements_for_vue">Vue improvements</a>, <a href="https://blog.jetbrains.com/feed/?_gl=1*1djr7qf*_ga*NzI5MDg0MDQwLjE2NTEwNTIyNTM.*_ga_9J976DJZ68*MTY1MzYyMzAzMy44LjAuMTY1MzYyMzA0MS4w&amp;_ga=2.194368301.1854496100.1653547382-729084040.1651052253#initial_support_for_the_built_in_node_js_test_runner">support for the built-in Node.js test runner</a>, <a href="https://blog.jetbrains.com/feed/?_gl=1*1djr7qf*_ga*NzI5MDg0MDQwLjE2NTEwNTIyNTM.*_ga_9J976DJZ68*MTY1MzYyMzAzMy44LjAuMTY1MzYyMzA0MS4w&amp;_ga=2.194368301.1854496100.1653547382-729084040.1651052253#support_for_advanced_vitest_extensions">support for advanced Vitest extensions</a>, and <a href="https://blog.jetbrains.com/feed/?_gl=1*1djr7qf*_ga*NzI5MDg0MDQwLjE2NTEwNTIyNTM.*_ga_9J976DJZ68*MTY1MzYyMzAzMy44LjAuMTY1MzYyMzA0MS4w&amp;_ga=2.194368301.1854496100.1653547382-729084040.1651052253#run_to_cursor_inlay_debug_option">the <em>Run to Cursor</em> inlay debug option</a>.</li>
<li><strong><a href="https://blog.jetbrains.com/feed/?_gl=1*1djr7qf*_ga*NzI5MDg0MDQwLjE2NTEwNTIyNTM.*_ga_9J976DJZ68*MTY1MzYyMzAzMy44LjAuMTY1MzYyMzA0MS4w&amp;_ga=2.194368301.1854496100.1653547382-729084040.1651052253#other_highlights">Other highlights</a></strong>: We’ve added support for the <code>exports</code> field of <code>package.json</code> for TypeScript files. There are also several bug fixes and some UX improvements.</li>
</ul>
<h2 id="new_features">New Features</h2>
<h3 id="angular_improvements">Angular improvements</h3>
<h4 id="support_for_signals">Support for Signals</h4>
<p>We’ve added the following live templates for signals: <code>signal</code>, <code>computed</code>, and <code>effect</code>. It’s also possible to customize the highlighting for signals by going to <em>Settings | Editor | Color Scheme | Angular Template | Signal</em>. You can easily create a signal straight from its template by writing a function and invoking the relevant quick-fix.</p>
<p><img alt="Gif showing Angular Signals support in WebStorm 2023.3 EAP" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/WS233_EAP_Digest3_Ang-signals.png" width="800" /></p>
<h4 id="improved_standalone_components_support">Improved standalone components support</h4>
<p>WebStorm 2023.3 will include several new inspections that will help you identify improper usage of standalone components. These include an inspection to highlight standalone declarables added to the declaration array of <code>NgModule</code>, as well as a warning for when imports or schemas are used on components that are not standalone. WebStorm can also verify whether each element is a module or standalone declaration in the import array.</p>
<p><img alt="Gif showing the Angular standalone components support in WebStorm 2023.3 EAP " src="https://blog.jetbrains.com/wp-content/uploads/2023/11/WS233_EAP_Ang-standalone.png" width="800" /></p>
<h4 id="new_angular_quick_fixes">New Angular quick-fixes</h4>
<p>The <em>Create field</em> and <em>Create method</em> intention actions now take the surrounding context into account, generating correctly declared fields. WebStorm 2023.3 also includes a new quick-fix to create <code>@Input</code> and <code>@Output</code> properties, with or without a transform property, from an Angular component template.</p>
<p><img alt="Gif showing the Angular quick fixes support in WebStorm 2023.3 EAP" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/WS233_EAP_Digest3_Ang-inp-outp.png" width="800" /></p>
<h3 id="react_updates">React updates</h3>
<h4 id="syntax_highlighting_for_client_and_server_components">Syntax highlighting for client and server components</h4>
<p>Starting with WebStorm 2023.3, in projects using React Server Components (such as App Router-based Next.js projects), client components and server components will be highlighted in different colors, making it easier to tell them apart. You can customize the highlighting colors in <em>Settings | Editor | Color Scheme | JavaScript</em>. We&#8217;ve also enhanced the code highlighting for the <code>use strict</code>, <code>use client</code>, and <code>use server</code> directives.</p>
<p><img alt="Image showing the different syntax highlighting for client and server components in both dark and light theme" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/WS233_EAP_Digest3_RSC.png" width="800" /></p>
<h4 id="react_live_template_cleanup">React live template cleanup</h4>
<p>We’ve performed some maintenance on and cleaned up the React live templates and removed a few rarely-used ones. If this maintenance has removed any templates you were using that you’d like to keep, please follow the <a href="https://youtrack.jetbrains.com/issue/WEB-63489" rel="noopener" target="_blank">instructions in this issue</a> explaining how to restore them.</p>
<h3 id="improvements_for_vue">Improvements for Vue 3</h3>
<p>We’ve improved our support for Vue 3 and added support for <code>defineSlots</code>, as well as resolution and completion for properties with <code>defineExpose</code>. You now also get auto import for components based on the component name defined in the <code>defineOptions</code> function.</p>
<p><img alt="Gif showing the new Vue improvements in WebStorm 2023.3 EAP" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/WS233_EAP_Digest3_Vue.png" width="800" /></p>
<h3 id="support_for_custom_css_property">Support for custom CSS @property</h3>
<p>We’ve been following updates around the Interop <a href="https://web.dev/interop-2023/" rel="noopener" target="_blank">initiative</a>. One of the areas of interest in the 2023 plan is <code>@property</code>, under the CSS Houdini umbrella of APIs. It allows you to explicitly define your CSS custom properties, making it possible to check and constrain property types, set default values, and specify whether a custom property can inherit values. WebStorm 2023.3 adds inspections and completion for these properties.</p>
<p><img alt="Gif showing the support for custom CSS @property in WebStorm 2023.3 EAP" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/WS233_EAP_Digest3_CSS-Props.png" width="800" /></p>
<h3 id="updates_to_the_svelte_plugin">Updates to the Svelte plugin</h3>
<p>Starting from WebStorm 2023.3, the <a href="https://github.com/sveltejs/language-tools/tree/master/packages/typescript-plugin" rel="noopener" target="_blank">TypeScript plugin</a> will be downloaded and enabled automatically by default for Svelte projects. You can configure the plugin version like you would for the Svelte Language Server. Go to <em>Settings | Languages &amp; Frameworks | TypeScript | Svelte</em> and update the TypeScript plugin package field. In the future, we plan to have the IDE automatically download the latest version.</p>
<p><img alt="Image showing the updates to the Svelte plugin in WebStorm 2023.3 EAP this shows the settings where a TypeScript plugin package can be selected." src="https://blog.jetbrains.com/wp-content/uploads/2023/11/WS233_EAP_Digest3_Svelte.png" width="800" /></p>
<h3 id="initial_support_for_the_built_in_node_js_test_runner">Initial support for the built-in Node.js test runner</h3>
<p>WebStorm 2023.3 introduces support for the built-in Node.js test runner. Tests declared with the <code>node:test</code> API are now recognized, and you can run and debug them via gutter icons. This support is still in its initial implementation and has some limitations, but you are able to write tests for JavaScript code without having to install any packages – you can just write tests and run them directly from your code.</p>
<p><img alt="Image showing the support for the built-in Node.js test runner in WebStorm 2023.3 EAP" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/WS233_EAP_Digest3_node-test-runner.png" width="800" /></p>
<h3 id="support_for_advanced_vitest_extensions">Support for advanced Vitest extensions</h3>
<p>WebStorm 2023.3 is better at detecting various Vitest tests, including <code>.concurrent</code> and <code>condition</code> tests like <code>.runIf</code> and <code>.skipIf</code>.</p>
<p><img alt="Image showing the support for the advanced Vitest extensions in WebStorm 2023.3 EAP" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/WS233_EAP_Digest3_Vitest.png" width="800" /></p>
<h3 id="improved_support_for_dev_containers">Improved support for Dev Containers</h3>
<p>WebStorm 2023.3 introduces support for <a href="https://containers.dev/implementors/features/" rel="noopener" target="_blank">Dev Container Features</a>, providing a fast and convenient way to integrate additional tools, runtimes, and libraries that are essential for development. While you can still rely on Dockerfiles and scripts for this purpose, the introduction of Dev Container Features streamlines the installation of essential components, ensuring a faster setup process.</p>
<p><img alt="Image showing the new Dev Container Features
" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/Dev-Container-1.png" width="800" /></p>
<p>We’ve also introduced support for Docker Compose within Dev Containers, enabling the IDE to seamlessly launch both the main container and any dependent containers, such as those with databases or message queues.</p>
<p><img alt="image showing the Docker Compose in the Dev Container" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/Dev-Container-2.png" width="800" /></p>
<p>In addition, we’ve implemented automatic port forwarding, meaning that any ports the application starts listening to in a Dev Container are seamlessly forwarded.</p>
<p><img alt="Gif showing the automatic port forwarding in Dev Containers in WebStorm 2023.3 EAP" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/Dev-Container-3.png" width="800" /></p>
<h3 id="run_to_cursor_inlay_debug_option"><em>Run to Cursor</em> inlay debug option</h3>
<p>WebStorm 2023.3’s new <em>Run to Cursor</em> inlay option allows you to quickly execute up to a specific line of code while debugging. Once your program is suspended, simply hover over the line of code you want to execute up to and use the <em>Run to Cursor</em> popup. You can also use this feature by invoking the keyboard shortcut (<em>⌥F9 / Alt+F9</em> ) after the caret is placed on the desired line.</p>
<p><img alt="Run to cursor debugging option in WebStorm 2023.3 EAP" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/WS233_EAP_DebugToCursor.png" width="800" /></p>
<p>This feature is enabled by default. To adjust it, navigate to <em>Settings | Advanced Settings | Debugger</em> and select the <em>Show inlay Run to Cursor popup</em> option.</p>
<p><img alt="Showing the advanced settings Shoe inlay Run to Cursor popup option in WebStorm 2023.3" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/WS233_EAP_DebugCursor_settings.png" width="800" /></p>
<h3 id="visual_editing_for_openapi_specifications">Visual editing for OpenAPI specifications</h3>
<p>We’ve implemented visual editing capabilities to help you quickly compose well-formatted OpenAPI specifications using live templates. These actions are available for both YAML and JSON files. To insert a template for an object, hover over the gutter on the relevant line and click the <code>+</code> icon.</p>
<p><img alt="images showing the visual editing for OpenAPI specifications in WebStorm 2023.3 EAP" src="https://blog.jetbrains.com/wp-content/uploads/2023/11/Visual-editing-for-OpenAPI-specifications.png" width="800" /></p>
<h3 id="automatic_code_completion_for_url_path_references">Automatic code completion for URL path references</h3>
<p>We’ve improved the code completion functionality for handling URLs. Now, when you type / in places where a URL path is expected, the IDE automatically populates the code completion popup with the URLs of server endpoints. When doing so, it considers both available APIs within your application and attached <a href="https://www.jetbrains.com/help/webstorm/endpoints-tool-window.html#options" rel="noopener" target="_blank">OpenAPI specifications</a>. This helps you specify the URL path more quickly.</p>
<p><img alt="Gif showing the automatic code completion for URL path references." src="https://blog.jetbrains.com/wp-content/uploads/2023/11/Automatic-code-completion-for-URL-path-references.png" width="800" /></p>
<h2 id="other_highlights">Other Highlights</h2>
<p>Here’s an overview of the key improvements for various technologies supported by WebStorm, along with some notable bug fixes.</p>
<p><strong>JavaScript, TypeScript, Markup, and style sheet languages</strong></p>
<ul>
<li>We’ve added support for the <code>exports</code> field of package.json for TypeScript files (<a href="https://youtrack.jetbrains.com/issue/WEB-60536" rel="noopener" target="_blank">WEB-60536</a>).</li>
<li>Autocompletion no longer takes an inordinate amount of time when used on CSS properties (<a href="https://youtrack.jetbrains.com/issue/WEB-58740" rel="noopener" target="_blank">WEB-58740</a>).</li>
</ul>
<p><strong>Frameworks and technologies</strong></p>
<ul>
<li>Exports are once again correctly recognized in <code>.vue</code> files when both <code>&lt;script&gt;</code> and <code>&lt;script setup&gt;</code> are used (<a href="https://youtrack.jetbrains.com/issue/WEB-53434" rel="noopener" target="_blank">WEB-53434</a>).</li>
<li>We&#8217;ve fixed the issue in Angular that was causing type mismatches in the generic form control (<a href="https://youtrack.jetbrains.com/issue/WEB-60215" rel="noopener" target="_blank">WEB-60215</a>).</li>
<li>In Angular templates, type narrowing once again works as expected when checking if a variable is undefined (<a href="https://youtrack.jetbrains.com/issue/WEB-62721" rel="noopener" target="_blank">WEB-62721</a>).</li>
<li>We&#8217;ve fixed the issues with modules referenced using the <code>workspace:</code> protocol not being resolved in Yarn PnP workspaces (<a href="https://youtrack.jetbrains.com/issue/WEB-59218" rel="noopener" target="_blank">WEB-59218</a> and <a href="https://youtrack.jetbrains.com/issue/WEB-60790/Navigation-doesnt-work-in-the-import-statement-between-workspaces-when-using-yarn-pnp" rel="noopener" target="_blank">WEB-60790</a>).</li>
</ul>
<p><strong>User experience</strong></p>
<ul>
<li>The <em>Project Errors</em> tab in the <em>Problems</em> tool window no longer refreshes on every selection (<a href="https://youtrack.jetbrains.com/issue/WEB-62636" rel="noopener" target="_blank">WEB-62636</a>).</li>
<li><em>Prettier</em> and <em>Optimize Imports</em> once again work correctly (<a href="https://youtrack.jetbrains.com/issue/WEB-53115" rel="noopener" target="_blank">WEB-53115</a>).</li>
<li>We’ve made some internal improvements that will enhance performance when working with TypeScript.</li>
</ul>
<p>That’s it for today. For the full list of improvements available in the latest EAP build, check out the release notes. Stay tuned for our beta and release candidate builds!</p></p>
            </div>
        ]]></content:encoded>
            <pubDate>Mon, 06 Nov 2023 13:57:52 +0000</pubDate>
        </item>
        
    </channel>
</rss>